[
    {
        "type": "text",
        "text": "Vanna使用",
        "text_level": 1,
        "page_idx": 0
    },
    {
        "type": "image",
        "img_path": "images/ab9f8ff6f83a6e35e7b0e11c5fe3acf3450e4da4869469a1bda772f5801e9c6d.jpg",
        "img_caption": [
            "Vanna 是开源的RAG框架，专注于将自然语言转换为SQL查询（Text-to-SQL），并支持与数据库的交互"
        ],
        "img_footnote": [],
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "Vanna特点",
        "text_level": 1,
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "Vanna特点: ",
        "text_level": 1,
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "·开源与可定制化：Vanna 提供完整的 Python库，支持本地化部署，允许用户自定义大语言模型（LLM）、向量数据库（VectorDB）和关系型数据库（如MySQL、PostgreSQL等）。",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "·RAG 增强的准确性：通过检索增强生成技术，结合数据库的元数据(如DDL语句、表注释、示例 SQL等)训练模型，显著提升复杂查询的准确率。",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "·多场景支持：适用于企业数据分析、智能客服、电商搜索、金融报告生成等场景，非技术人员可通过自然语言直接查询数据库。",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "·灵活的基础设施：支持多种LLM（如OpenAI、本地部署的Ollama）、向量数据库（如ChromaDB），并可扩展至非默认支持的数据库。",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "Vanna 工作原理",
        "text_level": 1,
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "Vanna工作原理",
        "text_level": 1,
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "·训练 RAG 模型",
        "text_level": 1,
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "输入数据库的元数据（如INFORMATION_SCHEMA）、DDL语句、文档或示例 SQL。  \n模型将这些信息转换为向量并存储到向量库中，用于后续检索。",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "·生成SQL ",
        "text_level": 1,
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "用户提问时，系统从向量库中检索相关上下文，组装成Prompt发送给LLM。  \nLLM生成SQL后，自动执行并返回结果（表格或图表）。",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "Vanna使用步骤",
        "text_level": 1,
        "page_idx": 4
    },
    {
        "type": "text",
        "text": "Vanna使用步骤:",
        "text_level": 1,
        "page_idx": 4
    },
    {
        "type": "text",
        "text": "vanna安装",
        "page_idx": 4
    },
    {
        "type": "text",
        "text": "pip install vanna，可选扩展如vanna[chromadb,ollama,mysql]支持本地化部署。",
        "page_idx": 4
    },
    {
        "type": "text",
        "text": "连接数据库自定义run_sql方法（如 MySQL需通过 mysql.connector 返回 Pandas DataFrame）。",
        "page_idx": 4
    },
    {
        "type": "text",
        "text": "·训练模型  \n通过DDL、文档或SQL示例训练，例如：  \nvn.train(ddl $= ^ { \\mathsf { \\Gamma } }$ \"CREATE TABLE uSers (id INT PRIMARY KEY, name VARCHAR(100))\")",
        "page_idx": 4
    },
    {
        "type": "text",
        "text": "提问与查询调用vn.ask(\"查询销售额最高的产品\")，生成并执行SQL。",
        "page_idx": 4
    },
    {
        "type": "text",
        "text": "Vanna使用 (ask函数)",
        "text_level": 1,
        "page_idx": 5
    },
    {
        "type": "text",
        "text": "ask函数",
        "page_idx": 5
    },
    {
        "type": "text",
        "text": "作用：用户通过自然语言提问时调用此函数，它是查询的核心入口，会依次调用generate_sql、run_sqI、generate_plotly_code、get_plotly_figure四个函数来完成整个查询及可视化的过程。",
        "page_idx": 5
    },
    {
        "type": "text",
        "text": "工作流程:",
        "text_level": 1,
        "page_idx": 5
    },
    {
        "type": "text",
        "text": "·首先将用户的问题转换成向量表示，然后在向量数据库中检索与问题语义最相似的DDL语句、文档和SQL查询。  \n·将检索到的信息和用户的问题一起提供给LLM，生成对应的SQL查询。  \n·执行生成的sQL查询，并将查询结果以表格和Plotly图表的形式返回给用户。",
        "page_idx": 5
    },
    {
        "type": "text",
        "text": "比如：vn.ask(\"查询heros表中 英雄攻击力前5名的英雄\")",
        "page_idx": 5
    },
    {
        "type": "text",
        "text": "Vanna使用 (generate_sql函数)",
        "text_level": 1,
        "page_idx": 6
    },
    {
        "type": "text",
        "text": "generate_sql函数",
        "page_idx": 6
    },
    {
        "type": "text",
        "text": "作用：根据用户输入的自然语言问题，生成对应的sQL语句。",
        "page_idx": 6
    },
    {
        "type": "text",
        "text": "工作流程:",
        "page_idx": 6
    },
    {
        "type": "text",
        "text": "，调用get_similar_question_sql函数，在向量数据库中检索与问题相似的sql/question对。",
        "page_idx": 6
    },
    {
        "type": "text",
        "text": "·调用get_related_ddl函数，在向量数据库中检索与问题相似的建表语句ddl。",
        "page_idx": 6
    },
    {
        "type": "text",
        "text": "·调用get_related_documentation函数，在向量数据库中检索与问题相似的文档。",
        "page_idx": 6
    },
    {
        "type": "text",
        "text": "·调用get_sql_prompt函数，结合上述检索到的信息生成prompt，然后将prompt提供给LLM，生成sQL语句。",
        "page_idx": 6
    },
    {
        "type": "text",
        "text": "比如：sql=vn.generate_sql(\"查询heros表中 英雄攻击力前5名的英雄\")",
        "page_idx": 6
    },
    {
        "type": "text",
        "text": "Vanna使用 (generate_sql函数)",
        "text_level": 1,
        "page_idx": 7
    },
    {
        "type": "text",
        "text": "run_sql函数",
        "page_idx": 7
    },
    {
        "type": "text",
        "text": "作用：执行generate_sql函数生成的sQL语句，并返回查询结果。",
        "page_idx": 7
    },
    {
        "type": "text",
        "text": "工作流程：将生成的SQL语句发送到连接的数据库中执行，获取并返回查询结果。",
        "page_idx": 7
    },
    {
        "type": "text",
        "text": "比如:",
        "page_idx": 7
    },
    {
        "type": "text",
        "text": "sql $\\ c =$ vn.generate_sql(\"查询heros表中英雄攻击力前5名的英雄\") ",
        "page_idx": 7
    },
    {
        "type": "text",
        "text": "vn.run_sql(sql)",
        "page_idx": 7
    },
    {
        "type": "text",
        "text": "打卡：Text2SQL",
        "text_level": 1,
        "page_idx": 8
    },
    {
        "type": "text",
        "text": "在你的工作中，都有哪些SQL查询的场景？（对应的数据表、SQL查询语句，LLM能否完  \n成，是否有临时SQL的需求)  \n使用LangChain或者vanna或者自己调用大模型来完成  \n可以使用heros数据表，或者用自己本地的MySQL数据表",
        "page_idx": 8
    },
    {
        "type": "text",
        "text": "Thank You Using data to solve problems ",
        "text_level": 1,
        "page_idx": 9
    }
]
[
    {
        "type": "text",
        "text": "Text2SQL: 自助式数据报表开发",
        "text_level": 1,
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "今天的学习目标",
        "text_level": 1,
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "Text2SQL: 自助式数据报表开发",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "Text to SQL技术LLM模型选择Function Call  \n·搭建SQL Copilot  \nLangChain中的sQLAgent  \n自己编写 (LLM + Prompt)CASE:保险场景SQLCopilot实战",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "CASE： 数据查询",
        "text_level": 1,
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "小张是运营负责人员，要给老板汇报投放数据，现在渠道，统计维度很多，如何响应老板的灵活查询？",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "比如：社交媒体在哪天的投放费用是最高的？ 2025年2月份一共花了多少钱，带来了多少转化量？．…",
        "page_idx": 2
    },
    {
        "type": "table",
        "img_path": "images/8e442ca25c6bce9b2d5a3972e356217cc6fb4514fe42b6e6a8bf0e40d96c5181.jpg",
        "table_caption": [],
        "table_footnote": [],
        "table_body": "<html><body><table><tr><td>渠道名称</td><td>日期</td><td>投放费用</td><td>展示量</td><td>点击量</td><td>转化量</td><td>次日留存率</td><td></td><td>7日留存率|转化ROI(%)</td></tr><tr><td>社交媒体</td><td>2025/2/11</td><td>3793.97</td><td>29502</td><td>479</td><td>2</td><td>0.3819</td><td>0.2571</td><td>0.05</td></tr><tr><td>行业论坛</td><td>2025/2/4</td><td>753.85</td><td>7889</td><td>79</td><td>1</td><td>0.3618</td><td>0.2256</td><td>0.13</td></tr><tr><td>信息流广告</td><td>2024/11/29</td><td>1810.53</td><td>14437</td><td>313</td><td>3</td><td>0.3814</td><td>0.2255</td><td>0.17</td></tr><tr><td>信息流广告</td><td>2025/1/2</td><td>4924.54</td><td>60417</td><td>2248</td><td>26</td><td>0.3395</td><td>0.1707</td><td>0.53</td></tr><tr><td>短视频平台</td><td>2025/2/17</td><td>571.85</td><td>4861</td><td>181</td><td>2</td><td>0.2722</td><td>0.1814</td><td>0.35</td></tr><tr><td>社交媒体</td><td>2025/1/7</td><td>3481.35</td><td>36267</td><td>1155</td><td>8</td><td>0.154</td><td>0.1069</td><td>0.23</td></tr><tr><td>KOL合作</td><td>2024/12/26</td><td>4669.96</td><td>38226</td><td>1254</td><td>16</td><td>0.4689</td><td>0.3246</td><td>0.34</td></tr><tr><td>行业论坛</td><td>2025/1/4</td><td>3140.38</td><td>32009</td><td>2200</td><td>12</td><td>0.3919</td><td>0.2089</td><td>0.38</td></tr><tr><td>搜索引擎</td><td>2024/12/25</td><td>4169.58</td><td>50293</td><td>2054</td><td>45</td><td>0.4431</td><td>0.2533</td><td>1.08</td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr></table></body></html>",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "channel_performance.csv ",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "Text to SQL技术",
        "text_level": 1,
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "Text-to-SQL(文本转 SQL)将自然语言问题自动转换为结构化的SQL查询语句，可以让用户更直观的与数据库进行交互。",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "Text-to-SQL的技术演变经历了3个阶段：",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "·早期阶段：依赖于人工编写的规则模板来匹配自然语言和SQL语句之间的对应关系。",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "，机器学习阶段:采用序列到序列模型等机器学习方法来学习自然语言和SQL之间的映射关系。",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "·LLM阶段：借助LLM强大的语言理解和代码生成能力，利用提示工程、微调等方法将Text-to-SQL性能提升到新的高度。",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "Text to SQL技术",
        "text_level": 1,
        "page_idx": 4
    },
    {
        "type": "text",
        "text": "我们目前已处于LLM阶段，基于LLM的Text-to-SQL系统会包含以下几个步骤：",
        "page_idx": 4
    },
    {
        "type": "text",
        "text": "·自然语言理解：分析用户输入的自然语言问题，理解其意图和语义。  \n·模式链接：将问题中的实体与数据库模式中的表和列进行链接。  \n·SQL生成:根据理解的语义和模式链接结果，生成相应的SQL查询语句。  \n·SQL执行：在数据库上执行SQL查询，将结果返回给用户。",
        "page_idx": 4
    },
    {
        "type": "text",
        "text": "LLM模型选择 （闭源模型）",
        "text_level": 1,
        "page_idx": 5
    },
    {
        "type": "text",
        "text": "·GPT-o1/o3:o1模型开启了新的Scaling Law，更专注于推理阶段，在编程和Textto SQL中能力优于gpt-4o，同时mini模型速度更快，价格更低。  \n·Claude3.7-sonnet:Anthropic公司于2025年2月发布，号称迄今为止最智能的模型，首款混合推理模型Claude 3.7-sonnet实现了两种思考方式的结合，既能提供接近即时的响应，也能展示分步骤的详细思考过程·Claude 3.5-sonnet：2024年推出的模型，支持20万tokens上下文，性能超过GPT-4o，在Cursor中使用非常顺滑。·Gemini 2.0：性能强悍，支持100万token上下文。  \n·Qwen-Turbo：支持100万token上下文，速度快，价格非常便宜。",
        "page_idx": 5
    },
    {
        "type": "text",
        "text": "LLM模型选择 （开源模型）",
        "text_level": 1,
        "page_idx": 6
    },
    {
        "type": "text",
        "text": "·DeepSeek-V3:在代码生成任务中表现出色，能够快速生成高质量的代码片段。它通过从DeepSeek-R1中蒸馏推理能力，显著提升了代码生成的准确性和效率·DeepSeek-R1:R1在代码生成和复杂逻辑推理方面表现卓越，特别是在处理复杂的编程任务和数学问题时，准确率更高。例如，在Codeforces Elo评分中，R1达到 2029分，超越 $9 6 . 3 \\%$ 的人类参赛者·Qwen：Qwen系列从0.5B，1.5B，3B，7B，14B，32B，72B等多种尺寸，性能优于Llama3.1。",
        "page_idx": 6
    },
    {
        "type": "text",
        "text": "LLM模型选择 （代码大模型）",
        "text_level": 1,
        "page_idx": 7
    },
    {
        "type": "text",
        "text": "·Qwen-Coder：能力强，接近闭源一线大模型，其中Qwen2.5-Coder-32B能力与GPT-4o持平  \n·CodeGeeX：智谱开源的代码大模型，基于GLM底座，性能卓越，在vscode等编辑器中可以找到对应的插件。·SQLCoder：专为 SQL生成而设计的开源模型，但是维护更新慢。  \n·DeepSeek-Coder：在多种编程语言中与开源代码模型中实现了先进的性能",
        "page_idx": 7
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 7
    },
    {
        "type": "image",
        "img_path": "images/4b968160157057fb2d9d0ce536dafd0a5eac8f6ce2a836024df52e50c275748b.jpg",
        "img_caption": [],
        "img_footnote": [],
        "page_idx": 7
    },
    {
        "type": "text",
        "text": "搭建SQL Copilot ",
        "page_idx": 8
    },
    {
        "type": "text",
        "text": "SQL Copilot ",
        "text_level": 1,
        "page_idx": 9
    },
    {
        "type": "text",
        "text": "方法1:SQLDatabase采用LangChain框架",
        "page_idx": 9
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 9
    },
    {
        "type": "text",
        "text": "提供了sql chain，prompt，retriever， tools,agent，让用户通过自然语言，执行SQL查询",
        "page_idx": 9
    },
    {
        "type": "text",
        "text": "优点：使用方便，自动通过数据库连接，获取数据库的metadata不足：执行不灵活，需要多次判断哪个表适合复杂查询很难胜任，对于复杂查询通过率低",
        "page_idx": 9
    },
    {
        "type": "text",
        "text": "方法2： 自己编写",
        "text_level": 1,
        "page_idx": 9
    },
    {
        "type": "text",
        "text": "本质是：LLM+RAG",
        "page_idx": 9
    },
    {
        "type": "text",
        "text": "选择适合的LLM，比如：ChatModel:DeepSeek-V3，CodeModel: Qwen2.5-Coder, CodeGeeX2-6BRAG，可以分成：向量数据库检索 $^ +$ 固定文件（比如本地数据表说明等)",
        "page_idx": 9
    },
    {
        "type": "text",
        "text": "优点：重心在于RAG的提供上，准确性高，配置灵活不足：需要设置的条件规则多",
        "page_idx": 9
    },
    {
        "type": "text",
        "text": "方法1：SQLDatabaseTookit使用",
        "text_level": 1,
        "page_idx": 10
    },
    {
        "type": "text",
        "text": "from langchain.agents import create_sql_agent   \nfrom langchain.agents.agent_toolkits import SQLDatabaseToolkit   \nfrom langchain.sql_database import SQLDatabase   \nfrom langchain.llms.openai import OpenAl   \nfrom langchain.agents import AgentExecutor   \n#连接到数据库   \ndb_user $\\mathbf { \\tau } = \\mathbf { \\tau }$ \"root\"   \ndb_password $\\mathbf { \\tau } = \\mathbf { \\tau }$ \"your_password\"   \ndb_host $\\mathbf { \\tau } = \\mathbf { \\tau }$ \"localhost:3306\"   \ndb_name $\\mathbf { \\tau } = \\mathbf { \\tau }$ \"wucai\"   \ndb $\\mathbf { \\tau } = \\mathbf { \\tau }$ SQLDatabase.from_uri(f\"mysql+pymysql://{db_user}:{db_password)@{db_host}/{db_name}\") ",
        "page_idx": 10
    },
    {
        "type": "text",
        "text": "通过sQLDatabase可以访问到数据库的Schema",
        "page_idx": 10
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 10
    },
    {
        "type": "text",
        "text": "方法1：SQLDatabaseToolkit使用",
        "text_level": 1,
        "page_idx": 11
    },
    {
        "type": "text",
        "text": "from langchain.chat_models import ChatOpenAl  \nIm $\\mathbf { \\tau } = \\mathbf { \\tau }$ ChatOpenAl(model_name $= ^ { \\mathsf { \\Gamma } }$ \"deepseek-chat\")  \n#需要设置Ilm  \ntoolkit $\\mathbf { \\tau } = \\mathbf { \\tau }$ SQLDatabaseToolkit(db=db, Ilm=llm)  \nagent_executor $\\mathbf { \\tau } = \\mathbf { \\tau }$ create_sql_agent($| | m = | | m ,$ toolkit $\\ c =$ toolkit,verbose $\\ c =$ True  \n1  \n#Task:描述数据表  \nagent_executor.run(\"描述与订单相关的表及其关系\")",
        "page_idx": 11
    },
    {
        "type": "text",
        "text": "> Entering new AgentExecutor chain.. ",
        "page_idx": 11
    },
    {
        "type": "text",
        "text": "Action: sql_db_list_tables ",
        "page_idx": 11
    },
    {
        "type": "text",
        "text": "Action Input: ",
        "page_idx": 11
    },
    {
        "type": "text",
        "text": "Observation: acceptedrides，address，address_copyl， covid_sh， douyin， douyin2, e_names，employees，gdp，height_grades，hero_score，hero_temp，heros，items，or er2，player_copyl，player_score，product_comment，product_comment2，product_con s，sessions，staff，team，team_score，test，transactions，trip，user，users，we Thought:There are many tables in the database， so I should query the schema of rs. ",
        "page_idx": 11
    },
    {
        "type": "text",
        "text": "Action: sql_db_schema ",
        "page_idx": 11
    },
    {
        "type": "text",
        "text": "Action Input: \"orders ",
        "page_idx": 11
    },
    {
        "type": "text",
        "text": "Observation: ",
        "page_idx": 11
    },
    {
        "type": "text",
        "text": "CREATE TABLE orders（ order_id INTEGER, customer_id INTEGER, order_date DATE, item_id VARCHAR(30), quantity INTEGER   \n)DEFAULT CHARSET=utf8mb4 COLLATE utf8mb4_0900_ai_ci ENGINE=InnoDB ",
        "page_idx": 11
    },
    {
        "type": "text",
        "text": "\\* ",
        "text_level": 1,
        "page_idx": 11
    },
    {
        "type": "text",
        "text": "3 rows from orders table:   \norder_id customer_id order_date item_id quantity   \n1 1 2020-06-01 1 10   \n2 1 2020-06-08 2 10   \n3 2 2020-06-02 1 5   \n\\*/ ",
        "page_idx": 11
    },
    {
        "type": "text",
        "text": "方法1：SQLDatabaseToolkit使用",
        "text_level": 1,
        "page_idx": 12
    },
    {
        "type": "text",
        "text": "三wucai   \n∨曲表 目acceptedrides 曲address address_copy1 曲covid_sh 用douyin 曲douyin2 用drivers 曲employee 目employee_names 曲employees 曲gdp 曲height_grades hero_score 曲hero_temp 曲heros 曲items 曲orders 曲person 曲 player 曲player_copy1 player_score 曲 player2 曲product_comment 曲product_comment2 product_comment3 曲result 曲rides 曲sales 曲sessions 曲staff 曲team 曲team_score 曲test transactions 曲trip ",
        "page_idx": 12
    },
    {
        "type": "text",
        "text": "Thought:The tables related to orders are\"orders\".I can query the \"orders\" table to get information abou t orders. ",
        "page_idx": 12
    },
    {
        "type": "text",
        "text": "Action: sql_db_query ",
        "page_idx": 12
    },
    {
        "type": "text",
        "text": "Action Input: \"SELECT \\* FROM orders LIMIT ${ 1 0 } ^ { \\prime \\prime }$ ",
        "page_idx": 12
    },
    {
        "type": "text",
        "text": "Observation:[(1，1，datetime.date(2020，6，1)，'1'，10)，(2，1，datetime.date(2020，6,8)，'2'，10)，(3,2，datetime.date(2020，6，2)，'1'，5)，(4，3，datetime.date(2020，6，3)，'3’，5)，(5，4，datetime.date(2020，6，4)，'4’，1)，(6，4，datetime.date(2020，6，5)，'5'，5)，(7，5，datetime.date(2020，6,5)，'1’，10)，(8,5，datetime.date(2020，6，14)，'4'，5)，(9，5，datetime.date(2020，6，21)，'3'，5)]Thought:The relevant tables related to orders are \"orders\".From the \"orders\" table，I obtained the following rows:",
        "page_idx": 12
    },
    {
        "type": "table",
        "img_path": "images/d50f11ccda6df8abf87c16f667069af4ac23183667a859eac6792959acaad711.jpg",
        "table_caption": [],
        "table_footnote": [],
        "table_body": "<html><body><table><tr><td>order_id</td><td>customer_id</td><td>order_date</td><td>item_id</td><td>quantity</td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr><tr><td>1</td><td>1</td><td>2020-06-01</td><td>1</td><td>10</td></tr><tr><td>2</td><td>1</td><td>2020-06-08</td><td>2</td><td>10</td></tr><tr><td>3</td><td>2</td><td>2020-06-02</td><td>1</td><td>5</td></tr></table></body></html>",
        "page_idx": 12
    },
    {
        "type": "text",
        "text": "Final Answer:The table related to orders is \"orders\".The columns in the\"orders\" table are order_id,cu stomer_id,order_date，item_id,and quantity. ",
        "page_idx": 12
    },
    {
        "type": "text",
        "text": "> Finished chain. ",
        "page_idx": 12
    },
    {
        "type": "text",
        "text": "'The table related to orders is \"orders\".The columns in the \"orders\" table are order_id,customer_id,order_ date， item_id,and quantity.' ",
        "page_idx": 12
    },
    {
        "type": "text",
        "text": "方法1：SQLDatabaseToolkit使用",
        "text_level": 1,
        "page_idx": 13
    },
    {
        "type": "text",
        "text": "#这个任务，实际上数据库中没有HeroDetails表agent_executor.run(\"描述HeroDetails表\")",
        "text_level": 1,
        "page_idx": 13
    },
    {
        "type": "text",
        "text": ">Entering new AgentExecutorchain. ",
        "text_level": 1,
        "page_idx": 13
    },
    {
        "type": "text",
        "text": "Action:sql_db_list_tables   \nActionInput:\"\"   \nObservation: acceptedrides，address,address_copyl，covid_sh，douyin，douyin2,drivers, employee, yee_names, employees，gdp,height_grades， hero_score，hero_temp， heros,items，orders, person，p player2，player_copyl，player_score， product_comment， product_comment2，product_comment3,result s，sales，sessions，staff，team, team_score，test，transactions，trip，user，users，weather Thought:The tablesinthe database are:acceptedrides,address，address_copyl，covid_sh，douyin, 2，drivers，employee，employee_names，employees，gdp，height_grades，hero_score，hero_temp,hero s，orders，person，player，player2，player_copyl，player_score，product_comment，product_comment uct_comment3，result，rides，sales，sessions，staff，team，team_score，test，transactions，trip, users,weather. ",
        "page_idx": 13
    },
    {
        "type": "text",
        "text": "Ishould query the schema of the HeroDetails table. ",
        "page_idx": 13
    },
    {
        "type": "text",
        "text": "Action:sql_db_schema ",
        "page_idx": 13
    },
    {
        "type": "text",
        "text": "ActionInput:\"HeroDetails\" ",
        "page_idx": 13
    },
    {
        "type": "text",
        "text": "Observation:Error:table_names{'HeroDetails'}not found in database Thought: ",
        "page_idx": 13
    },
    {
        "type": "text",
        "text": "OutputParserException Traceback (most recent call last)   \nCellIn[6]，line 2 1 # Task: 2 agent_executor.run(\"描述HeroDetails表\") ",
        "page_idx": 13
    },
    {
        "type": "text",
        "text": "File \\~\\AppData\\Roaming\\Python\\Python311\\site-packages\\langchain\\chains\\base.py:451, in Chain.run(self, callbacks， tags， metadata， \\*args， \\*\\*kwargs) 449 if len(args) $! = ~ 1$ ： 450 raise ValueError(\" run’ supports only one positional argument.\") ->451 return self(args[0]， callbacks=callbacks, tags=tags, metadata=metadata)[ 452 output_key 453 ] 455 if kwargs and not args: 456 return self(kwargs, callbacks=callbacks, tag $\\mathrm { ~ s = ~ }$ tags，metadata=metadata)[ 457 _output_key 458 ] 54 obserVation=MISSING_ACTION_AFTER_THOUGHT_ERROR_MESSAGE, 55 llm_output=text, 56 send_to_llm=True, 57 ） 58 elif not re.search( 59 r\"[\\s]\\*Action\\s\\*\\d\\*\\s\\*Input\\s\\*\\d\\*\\s\\*:[\\s]\\*(.\\*)\"， text，re.DOTALL 60）: 61 raise OutputParserException( 62 f\"Could not parse LLM output:‘{text}'' 63 obserVation=MISSING_ACTION_INPUT_AFTER_ACTION_ERROR_MESSAGE, 64 llm_output=text, 65 send_to_llm=True, 66 ） ",
        "page_idx": 13
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 13
    },
    {
        "type": "text",
        "text": "如果没有找到对应的表，会解析报错OutputParseException",
        "text_level": 1,
        "page_idx": 13
    },
    {
        "type": "text",
        "text": "OutputParserException: Could not parse LLM output:The table \"HeroDetails\" does not exist in the databas e.I don't know the schema of the HeroDetails table. ",
        "page_idx": 13
    },
    {
        "type": "text",
        "text": "方法1：SQLDatabaseToolkit使用",
        "text_level": 1,
        "page_idx": 14
    },
    {
        "type": "text",
        "text": "#这个任务，数据库中的表实际为herosagent_executor.run(\"描述Hero表\")",
        "text_level": 1,
        "page_idx": 14
    },
    {
        "type": "text",
        "text": ">Entering new AgentExecutor chain.. ",
        "page_idx": 14
    },
    {
        "type": "text",
        "text": "Action:sql_db_list_tables   \nAction Input:\"\"   \nObservation:acceptedrides，address，address_copyl，covid_sh，douyin，douyin2，drivers，employee，employ   \ne_names，employees，gdp，height_grades，hero_score，hero_temp，heros，items，orders，person，player，pla   \ner2，player_copyl，player_score，product_comment，product_comment2，product_comment3，result，rides，sal   \ns，sessions，staff，team， team_score，test，transactions，trip，user，users，weather   \nThought:The relevant table is \"heros\". I should query the schema of this table.   \nAction: sql_db_schema   \nAction Input: \"heros\"   \nObservation:   \nCREATE TABLE heros（ id INTEGER NOT NULL AUTO_INCREMENT, name VARCHAR(255） CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL, hp_max FLOAT, hp_growth FLOAT, hp_start FLOAT, mp_max FLOAT, mp_growth FLOAT, mp_start FLOAT, attack_max FLOAT, attack_growth FLOAT, attack_start FLOAT, defense_max FLOAT, defense_growth FLOAT, defense_start FLOAT, hp_5s_max FLOAT, hp_5s_growth FLOAT, ",
        "page_idx": 14
    },
    {
        "type": "text",
        "text": "/\\* ",
        "text_level": 1,
        "page_idx": 14
    },
    {
        "type": "text",
        "text": "3 rows from heros table:   \nid name hp_max hp_growth hp_start mp_max mp_growth mp_start attack_max   \nattack_growth attack_start defense_max defense_growth defense_start hp_5s_max hp_5s_growth   \nhp_5s_start mp_5s_max mp_5s_growth mp_5s_start attack_speed_max attack_range role   \n_main role_assist birthdate   \n10000 夏侯惇 7350.0 288.8 3307.0 1746.0 94.0 430.0 321.0 11.57 159.0 397.0 21.14 101.   \n0 98.0 3.357 51.0 37.0 1. 571 15.0 0.0 近战 坦克 战士 2016-07-19   \n10001 钟无艳 7000.0 275.0 3150.0 1760.0 95.0 430.0 318.0 11.0 164.0 409.0 22.07 100.   \n0 92.0 3.143 48.0 37.0 1. 571 15.0 0.0 近战 战士 坦克 None   \n10002 张飞 8341.0 329.4 3450.0 100.0 0.0 100.0 301.0 10.57 153.0 504.0 27.07 125.   \n0 115.0 4.143 57.0 5.0 0.0 5.0 0.0 近战 坦克 辅助 None   \n\\*/   \nThought:The Hero table has the following columns: id   \nname   \nhp_max   \n- hp_growth   \n- hp_start   \n- mp_max   \n- mp_growth   \n- mp_start   \n-attack_max   \nattack_growth   \nattack_start defense max defense_growth defense_start hp_5s_max hp_5s_growth hp_5s_start mp_5s_max   \nmp_5s_growth   \n-mp_5s_start   \n- attack_speed_max   \n- attack_range   \nrole_main   \n- role_assist   \nbirthdate ",
        "page_idx": 14
    },
    {
        "type": "text",
        "text": "Final Answer: The Hero table has the above columns. ",
        "page_idx": 14
    },
    {
        "type": "text",
        "text": "$\\mathrm { > }$ Finished chain. 'The Hero table has the above columns.' ",
        "page_idx": 14
    },
    {
        "type": "text",
        "text": "方法1：SQLDatabaseToolkit使用",
        "text_level": 1,
        "page_idx": 15
    },
    {
        "type": "text",
        "text": "#执行指定的任务：编写 $S { \\mathsf { O } } L = >$ 查询结果 agent_executor.run(\"找出英雄攻击力最高的前5个英雄\") ",
        "text_level": 1,
        "page_idx": 15
    },
    {
        "type": "text",
        "text": ">Entering new AgentExecutor chain..   \nAction:sql_db_list_tables   \nAction Input:\"\"   \nObservation:acceptedrides，address，addresscopyl，covid_sh，douyin，douyin2，drivers，employee，employe   \ne_names，employees，gdp，height_grades，hero_score，hero_temp，heros，items，orders，person，player，play   \ner2，player_copyl， player_score，product_comment， product_comment2，product_comment3，result，rides，sale   \ns， sessions， staff， team， team_score，test，transactions， trip，user，users，weather   \nThought:The tables that might contain information about heroes and their attack power are \"heros\" and “he   \nro_score\". I should query the schema of these tables to see what columns they have.   \nAction:sql_db_schema   \nAction Input:\"heros，hero_score\"   \nObservation:   \nCREATE TABLE herO_score（ id INTEGER NOT NULL AUTO_INCREMENT, SCOre INTEGER NOT NULL DEFAULT'0' name VARCHAR(2O） CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci, PRIMARY KEY (id)   \n)DEFAULT CHARSET=utf8mb4 COLLATE utf8mb4_0900_ai_ci ENGINE=InnoDB ",
        "page_idx": 15
    },
    {
        "type": "text",
        "text": "/\\* ",
        "text_level": 1,
        "page_idx": 15
    },
    {
        "type": "text",
        "text": "3 rows from hero_score table: id score name 1 80 张飞 2 95 关羽 3 92 刘备 \\*/ ",
        "page_idx": 15
    },
    {
        "type": "text",
        "text": "找到了数据库中两个相关的表：heros,hero_score分别进行查询，发现heros这个数据表可以找到问题的答案，最终结果为：阿轲,孙尚香，百里守约,虞姬,黄忠",
        "page_idx": 15
    },
    {
        "type": "text",
        "text": "CREATETABLEheros（ ",
        "text_level": 1,
        "page_idx": 15
    },
    {
        "type": "text",
        "text": "idINTEGER NOT NULL AUTO_INCREMENT, nameVARCHAR(255)CHARACTERSETutf8COLLATEutf8_general_ciNOTNULL, hp_maxFLOAT, hp_growth.FLOAT, hp_start FLOAT, mp_max FLOAT, mp_growth FLOAT, mp_start FLOAT, attack maxFLOAT, attack_growthFLOAT, attack_startFLOAT, defense_maxFLOAT, defense_growth FLOAT, defense_startFLOAT, hp_5s_maxFLOAT, hp_5s_growthFLOAT, hp_5s_start FLOAT, mp_5smax FLOAT, mp_5s_growth FLOAT, mp_5s_start FLOAT, attack_speed_maxFLOAT, attack_rangeVARCHAR(255)CHARACTERSETutf8COLLATEutf8_general_ci, role_mainVARCHAR(255)CHARACTERSETutf8COLLATEutf8_general_ci, role_assistVARCHAR(255)CHARACTERSETutf8COLLATEutf8_general_ci, birthdate DATE, PRIMARYKEY（id) DEFAULT CHARSET=utf8ROW_FORMAT=DYNAMIC ENGINE=InnoDB ",
        "page_idx": 15
    },
    {
        "type": "table",
        "img_path": "images/e2ab8389c9cf58d7e29190393226893c609b574d49eaf0411e35c7f10b6c39a1.jpg",
        "table_caption": [],
        "table_footnote": [
            "Thought:Icanquerythe\"heros\"tabletofindtheheroes withthehighestattack power.Ishouldordertheresultsbythe\"attack_max”columnindescendingorderand limittheresultsto5.Action:sql_db_queryActionInput:\"SELECTname，attack_maxFROMherosORDERBYattack_maxDESCLIMIT5\"Observation:[‘阿轲’，427.0），（'孙尚香’，4110)，（'百里守约’，410.0)，（'虞姬’，407.0)，（黄忠’，403.0)]Thought:Theheroeswiththehighestattack powerare“阿柯”，“孙尚香”，\"百里守约\"，\"虞姬”，and“黄忠\".FinalAnswer：阿轲，孙尚香，百里守约，虞姬，黄忠"
        ],
        "table_body": "<html><body><table><tr><td></td><td>3rows from heros table:</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>id</td><td>name</td><td>hp_max</td><td>hp_growth</td><td></td><td>hp_start</td><td></td><td>mp_max</td><td>mp_growth</td><td></td><td>mp_start</td><td></td><td>attack_max</td><td></td></tr><tr><td></td><td>attack_growth</td><td>attack_start</td><td></td><td>defense_max</td><td></td><td></td><td>defense_growth</td><td>defense_start</td><td></td><td>hp_5s_max</td><td></td><td></td><td>hp_5s_growth</td></tr><tr><td>hp_5s_start</td><td></td><td>mp_5s_max</td><td></td><td>mp_5s_growth</td><td></td><td>mp_5s_start</td><td></td><td>attack_speed_max</td><td></td><td></td><td></td><td>attack_range</td><td>role</td></tr><tr><td>main</td><td>role_assist</td><td></td><td>birthdate</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>10000</td><td>夏侯惇</td><td>7350.0</td><td>288.8</td><td>3307.0</td><td>1746.0</td><td>94.0</td><td>430.0</td><td>321.0</td><td>11.57</td><td>159.0</td><td>397.0</td><td>21.14</td><td>101.</td></tr><tr><td>0</td><td>98.0</td><td>3.357</td><td>51.0</td><td>37.0</td><td>1.571</td><td>15.0</td><td>0.0</td><td>近战</td><td>坦克</td><td>战士</td><td>2016-07-19</td><td></td><td></td></tr><tr><td>10001</td><td>钟无艳</td><td>7000.0</td><td>275.0</td><td>3150.0</td><td>1760.0</td><td>95.0</td><td>430.0</td><td>318.0</td><td>11.0</td><td>164.0</td><td>409.0</td><td>22.07</td><td>100.</td></tr><tr><td>0</td><td>92.0</td><td>3.143</td><td>48.0</td><td>37.0</td><td>1.571</td><td>15.0</td><td>0.0</td><td>近战</td><td>战士</td><td>坦克</td><td>None</td><td></td><td></td></tr><tr><td>10002</td><td>张飞</td><td>8341.0</td><td>329.4</td><td>3450.0</td><td>100.0</td><td>0.0</td><td>100.0</td><td>301.0</td><td>10.57</td><td>153.0</td><td>504.0</td><td>27.07</td><td>125.</td></tr><tr><td>0</td><td>115.0</td><td>4.143</td><td>57.0</td><td>5.0</td><td>0.0</td><td>5.0</td><td>0.0</td><td>近战</td><td>坦克</td><td>辅助</td><td>None</td><td></td><td></td></tr></table></body></html>",
        "page_idx": 15
    },
    {
        "type": "text",
        "text": "$>$ Finished chain. ’阿轲，孙尚香，百里守约，虞姬，黄忠’ ",
        "page_idx": 15
    },
    {
        "type": "text",
        "text": "Summary (SQL+LLM) ",
        "text_level": 1,
        "page_idx": 16
    },
    {
        "type": "text",
        "text": "$\\mathsf { S O L } + \\mathsf { L L M }$ 使用:",
        "text_level": 1,
        "page_idx": 16
    },
    {
        "type": "text",
        "text": "·通过sQLDatabase可以访问到数据库的Schemaagent_executor作为sQLAgent，可以执行用户的各种SQL需求（通过自然语言 $\\Rightarrow$ 编写 $S O L \\Rightarrow$ 查询结果返回)  \n如果数据库中没有找到对应的表，会报  \nOutputParseException错误  \n如果有多张表，会分别执行，然后判断哪个数据表可以  \n得到结果  \nfrom langchain.chat_models import ChatOpenAl  \nIm $\\mathbf { \\tau } = \\mathbf { \\tau }$ ChatOpenAl(model_name $\\ c =$ \"gpt-3.5-turbo\")  \n#需要设置Ilm  \ntoolkit $\\mathbf { \\tau } = \\mathbf { \\tau }$ SQLDatabaseToolkit(db $\\ c =$ db, Ilm=llm)  \nagent_executor $\\mathbf { \\tau } = \\mathbf { \\tau }$ create_sql_agent(IIm=Ilm,toolkit $\\ c =$ toolkit,verbose $\\ c =$ True  \n#Task:描述数据表  \nagent_executor.run(\"描述与订单相关的表及其关系\")",
        "page_idx": 16
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 16
    },
    {
        "type": "text",
        "text": "Thinking: 直接使用SQL+LLM会有什么问题？",
        "page_idx": 17
    },
    {
        "type": "text",
        "text": "1） 多个相似的数据表 $\\cdot$ 导致LangChain会尝试多次生成sQL",
        "page_idx": 17
    },
    {
        "type": "text",
        "text": "2) 用户Prompt太宽泛 $\\Rightarrow$ 生成的结果 不是用户想要的给Agent配备专有知识库 在prompt中动态完善和query相关的context",
        "page_idx": 17
    },
    {
        "type": "image",
        "img_path": "images/77dcf57baced7b8992e6f6720991717dc835adf8999b1d11849ce9935942ea87.jpg",
        "img_caption": [],
        "img_footnote": [],
        "page_idx": 17
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 17
    },
    {
        "type": "text",
        "text": "SQL+ 向量数据库 + LLM ",
        "text_level": 1,
        "page_idx": 18
    },
    {
        "type": "text",
        "text": "$\\mathsf { S O L + }$ 向量数据库 $^ +$ LLM:",
        "text_level": 1,
        "page_idx": 18
    },
    {
        "type": "text",
        "text": "·向量数据库可以提供领域知识，当用户检索某个问题的时候 $\\Rightarrow$ 从向量数据库中找到相关的内容，放到prompt中 $\\Rightarrow$ 提升SQL查询的相关性",
        "page_idx": 18
    },
    {
        "type": "text",
        "text": "RAG技术 (Retrieval Augmented Generation) ",
        "page_idx": 18
    },
    {
        "type": "text",
        "text": "·在prompt中增加few-shot examples   \n·专门定制检索工具，从向量数据库中检索到与用户 query相近的知识 agent.run(\"How many employees do we have?\")   \n$>$ Entering new AgentExecutor chain...   \nInvoking: \\`sql_get_similar_examples\\` with \\`How many employees do we have?\\`   \n[Document(page_content $= ^ { \\mathsf { I } }$ How many employees are there',   \nmetadata $\\ c =$ {'sql_query': 'SELECT COUNT(\\*) FROM \"employee\"}) Document(page_content $\\mathbf { \\lambda } = \\mathbf { \\lambda } ^ { \\prime }$ Which employee has sold the most?', metadata={'sql_query': \"SELECT e.FirstName $| | { } ^ { \\prime \\prime } | |$ e.LastName AS EmployeeName, SUM(i.Total) AS TotalSales\\n FROM Employee e\\n JOIN Customer c ON e.Employeeld $\\mathbf { \\tau } = \\mathbf { \\tau }$ c.SupportRepld\\n JOIN Invoice i ON c.Customerld $\\mathbf { \\tau } = \\mathbf { \\tau }$ i.Customerld\\n GROUP BY e.Employeeld\\n ORDER BY TotalSales DESC\\n LIMIT 1;\"})] Invoking:\\`sql_db_query' with\\`SELECT COUNT(\\*) FROM employee) responded: {content}   \n[(8,)]We have 8 employees. ",
        "page_idx": 18
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 18
    },
    {
        "type": "text",
        "text": "SQL+ 向量数据库 + LLM ",
        "text_level": 1,
        "page_idx": 19
    },
    {
        "type": "text",
        "text": "Thinking：除了对用户query，补充领域知识外，针对专门名词（用户可以拼写错误的），也可以进行纠正 sql_agent(\"What is 'Francis Trembling's email address?\") Invoking: \\`name_search' with \\`Francis Trembling [Document(page_content $= ^ { \\prime }$ Francois Tremblay', metadata={), Document(page_content $= ^ { \\prime }$ Edward Francis',metadata={), Document(page_content $= ^ { \\prime }$ Frank Ralston', metadata={) Document(page_content $= ^ { \\prime }$ Frank Harris', metadata={), Document(page_content $= \" N$ . Frances Street', metadata={})] Invoking:\\`sql_db_query_checker' with \\`SELECT Email FROM Customer WHERE FirstName $\\mathbf { \\tau } = \\mathbf { \\tau }$ 'Francois' AND LastName $\\mathbf { \\tau } = \\mathbf { \\tau }$ 'Tremblay' LIMIT 1 responded: {content} ",
        "page_idx": 19
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 19
    },
    {
        "type": "text",
        "text": "SELECT Email FROM Customer WHERE FirstName $\\mathbf { \\tau } = \\mathbf { \\tau }$ 'Francois' AND LastName $\\mathbf { \\tau } = \\mathbf { \\tau }$ 'Tremblay' LIMIT 1 Invoking: \\`sql_db_query' with \\`SELECT Email FROM Customer WHERE FirstName $\\mathbf { \\tau } = \\mathbf { \\tau }$ 'Francois' AND LastName $\\mathbf { \\tau } = \\mathbf { \\tau }$ 'Tremblay' LIMIT1\\` ",
        "page_idx": 19
    },
    {
        "type": "text",
        "text": "[('ftremblay@gmail.com',)]The email address of 'Francois Tremblay' is 'ftremblay@gmail.com'. ",
        "page_idx": 19
    },
    {
        "type": "text",
        "text": "$>$ Finished chain.   \n{'input': \"What is 'Francis Trembling' email address?\", 'output': \"The email address of 'Francois Tremblay' is   \nftremblay@gmail.com'.\"} ",
        "page_idx": 19
    },
    {
        "type": "text",
        "text": "Summary (SQL+向量数据库+LLM) ",
        "text_level": 1,
        "page_idx": 20
    },
    {
        "type": "text",
        "text": "$\\mathsf { S O L + }$ 向量数据库 $^ +$ LLM使用:",
        "text_level": 1,
        "page_idx": 20
    },
    {
        "type": "text",
        "text": "·如果想让LLM使用tool（可以按照某个顺序，执行完这个再执行下一个），比较有效的方式是写在prompt中，而不是在tooldescription中进行定义  \n·向量数据库的作用：  \n给Prompt提供更多的context，用于LLM进行决策",
        "page_idx": 20
    },
    {
        "type": "text",
        "text": "Thinking: 使用向量数据库的时候 有哪些可以优化的地方？",
        "page_idx": 20
    },
    {
        "type": "text",
        "text": "·使用similarity threshold，来决定retrieved examples的质量（有些example和用户query关系不大)·优化few-showexamples的多样性，让尽可能多的情况展示给prompt",
        "page_idx": 20
    },
    {
        "type": "text",
        "text": "CASE: 保险场景SQLCopilot实战",
        "page_idx": 21
    },
    {
        "type": "text",
        "text": "保险场景 SQL查询",
        "text_level": 1,
        "page_idx": 22
    },
    {
        "type": "text",
        "text": "数据表：",
        "text_level": 1,
        "page_idx": 22
    },
    {
        "type": "text",
        "text": "1）客户信息表 (Customerlnfo) :",
        "page_idx": 22
    },
    {
        "type": "text",
        "text": "2）保单信息表 (Policylnfo)",
        "page_idx": 22
    },
    {
        "type": "text",
        "text": "3） 理赔信息表 (ClaimInfo)",
        "page_idx": 22
    },
    {
        "type": "text",
        "text": "4）受益人信息表 (Beneficiarylnfo)",
        "page_idx": 22
    },
    {
        "type": "text",
        "text": "5）代理人信息表 (AgentInfo)",
        "page_idx": 22
    },
    {
        "type": "text",
        "text": "6）保险产品信息表 (ProductInfo)",
        "page_idx": 22
    },
    {
        "type": "text",
        "text": "7）保险公司内部员工表 (Employeelnfo)",
        "page_idx": 22
    },
    {
        "type": "image",
        "img_path": "images/067b7b43fe982d38375083db94dacf731955e30f5df13153f56cd27b0a711b44.jpg",
        "img_caption": [],
        "img_footnote": [],
        "page_idx": 22
    },
    {
        "type": "text",
        "text": "保险场景 SQL查询",
        "text_level": 1,
        "page_idx": 23
    },
    {
        "type": "text",
        "text": "TODO：针对保险场景进行SQL查询 ",
        "text_level": 1,
        "page_idx": 23
    },
    {
        "type": "text",
        "text": "1、获取所有客户的姓名和联系电话。  \n2、找出所有已婚客户的保单。  \n3、查询所有未支付保费的保单号和客户姓名。4、找出所有理赔金额大于10000元的理赔记录，并列出相关客户的姓名和联系电话  \n5、查找代理人的姓名和执照到期日期，按照执照到期日期升序排序。  \n6、获取所有保险产品的产品名称和保费，按照保费降序排序。",
        "page_idx": 23
    },
    {
        "type": "text",
        "text": "7、查询所有在特定销售区域工作的员工的姓名和职位。",
        "page_idx": 23
    },
    {
        "type": "text",
        "text": "8、找出所有年龄在30岁以下的客户，并列出其客户ID、姓名和出生日期。",
        "page_idx": 23
    },
    {
        "type": "text",
        "text": "9、查找所有已审核但尚未支付的理赔记录，包括理赔号、审核人和审核日期。",
        "page_idx": 23
    },
    {
        "type": "text",
        "text": "10、获取每个产品类型下的平均保费，以及该产品类型下的产品数量。",
        "page_idx": 23
    },
    {
        "type": "text",
        "text": "Thinking: 如何让LLM进行SQL查询， 准确率如何？",
        "page_idx": 23
    },
    {
        "type": "text",
        "text": "方法1: SQLDatabaseToolkit方法2： 自己编写",
        "page_idx": 23
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 23
    },
    {
        "type": "text",
        "text": "SQL数据表",
        "text_level": 1,
        "page_idx": 24
    },
    {
        "type": "text",
        "text": "客户信息表（Customerlnfo）：客户ID（CustomerID）、客户姓名（Name）、性别（Gender）、出生日期（DateOfBirth）、身份证号码（IDNumber）、联系地址（Address）、联系电话（PhoneNumber）、电子邮件地址（EmailAddress）、婚姻状况（MaritalStatus）、职业（Occupation）、健康状况（HealthStatus）、客户注册日期（RegistrationDate）、客户类型（CustomerType）、客户来源(SourceOfCustomer）、客户状态（CustomerStatus)",
        "page_idx": 24
    },
    {
        "type": "text",
        "text": "保单信息表（PolicyInfo）：保单号（PolicyNumber）、客户ID（CustomerID）、保险产品ID（ProductID）、保单状态（PolicyStatus）受益人（Beneficiary）、受益人关系（Relationship）、投保日期（PolicyStartDate）、终止日期（PolicyEndDate）、保费支付状态(PremiumPaymentStatus）、保费支付日期（PaymentDate）、保费支付方式（PaymentMethod）、代理人ID（AgentID)",
        "page_idx": 24
    },
    {
        "type": "text",
        "text": "理赔信息表（Claimlnfo）：理赔号（ClaimNumber）、保单号（PolicyNumber）、理赔日期（ClaimDate）、理赔类型（ClaimType）、理赔金额（ClaimAmount）、理赔状态（ClaimStatus）、理赔描述（ClaimDescription）、受益人ID（BeneficiaryID）、医疗记录(MedicalRecords）、事故报告（AccidentReport）、审核人（ClaimHandler）、审核日期（ReviewDate）、支付方式(PaymentMethod）、支付日期（PaymentDate）、拒赔原因（DenialReason）",
        "page_idx": 24
    },
    {
        "type": "text",
        "text": "SQL数据表",
        "text_level": 1,
        "page_idx": 25
    },
    {
        "type": "text",
        "text": "受益人信息表（Benefiarylnfo）：受益人ID（BeneficiaryID）、姓名（Name）、性别（Gender）、出生日期（DateOfBirth）、国籍(Nationality）、联系地址（Address）、电话号码（PhoneNumber）、电子邮件（EmailAddress)",
        "page_idx": 25
    },
    {
        "type": "text",
        "text": "代理人信息表（AgentInfo）：代理人ID（AgentID）、姓名（Name）、性别（Gender）、出生日期（DateOfBirth）、联系地址(Address）、电话号码（PhoneNumber）、电子邮件（EmailAddress）、证书号码（CertificateNumber）、执照发放日期(LicenselssueDate）、执照到期日期（LicenseExpirationDate）、佣金结构（CommissionStructure)",
        "page_idx": 25
    },
    {
        "type": "text",
        "text": "险产品信息表（ProductInfo）：产品ID（ProductID）、产品名称（ProductName）、产品类型（ProductType）、保险金额范围(CoverageRange）、保险期限（CoverageTerm）、保费（Premium）、缴费频率（PaymentFrequency）、产品特性(ProductFeatures）、投保年龄限制（AgeLimit）、保费计算方式（PremiumCalculation）、理赔流程（ClaimsProcess）、投保要求(UnderwritingRequirements）、销售区域（SalesRegion）、产品状态（ProductStatus)",
        "page_idx": 25
    },
    {
        "type": "text",
        "text": "保险公司内部员工表（Employeelnfo）：员工ID（EmployeeID）、姓名（Name）、性别（Gender）、出生日期（DateOfBirth）、联系地址（Address）、电话号码（PhoneNumber）、电子邮件（EmailAdress）、入职日期（HireDate）、职位（Position）、部门(Department）、工资（Salary）、工作地点（Location）、上级主管（Supervisor）、员工类型（EmployeeType）、员工状态(EmployeeStatus)",
        "page_idx": 25
    },
    {
        "type": "text",
        "text": "SQL数据表",
        "text_level": 1,
        "page_idx": 26
    },
    {
        "type": "text",
        "text": "REATE TABLE CustomerInfo（   \nCustomerID INT PRIMARY KEY,   \nName VARCHAR(50),   \nGender VARCHAR(10),   \nDateOfBirth DATE,   \nIDNumber VARCHAR(18),   \nAddress VARCHAR(100),   \nPhoneNumber VARCHAR(20),   \nEmailAddress VARCHAR(50),   \nMaritalStatus VARCHAR(20),   \nOccupation VARCHAR(50),   \nHealthStatus VARCHAR(20),   \nRegistrationDate DATE,   \nCustomerType VARCHAR(20),   \nSourceOfCustomer VARCHAR(50)   \nCustomerStatus VARCHAR(20) ",
        "page_idx": 26
    },
    {
        "type": "text",
        "text": "LKEAIE IABLE POIICYInTO（ ",
        "text_level": 1,
        "page_idx": 26
    },
    {
        "type": "text",
        "text": "PolicyNumber INT PRIMARY KEY, CustomerID INT, ProductID INT, PolicyStatus VARCHAR(20), Beneficiary VARCHAR(50), Relationship VARCHAR(20), PolicyStartDate DATE, PolicyEndDate DATE, PremiumPaymentStatus VARCHAR(20), PaymentDate DATE, PaymentMethod VARCHAR(20), AgentID INT ）； ： ",
        "page_idx": 26
    },
    {
        "type": "text",
        "text": "保险场景 SQL查询",
        "text_level": 1,
        "page_idx": 27
    },
    {
        "type": "text",
        "text": "1、获取所有客户的姓名和联系电话。",
        "text_level": 1,
        "page_idx": 27
    },
    {
        "type": "text",
        "text": "SELECT Name， PhoneNumberFROM CustomerInfo",
        "page_idx": 27
    },
    {
        "type": "text",
        "text": "2、找出所有已婚客户的保单。",
        "page_idx": 27
    },
    {
        "type": "text",
        "text": "SELECT ",
        "page_idx": 27
    },
    {
        "type": "text",
        "text": "Policylnfo.PolicyNumber, Policylnfo.CustomerID, Policylnfo.ProductID, Policylnfo.PolicyStatus, Policylnfo.Beneficiary, Policylnfo.Relationship, Policylnfo.PolicyStartDate, Policylnfo.PolicyEndDate, ",
        "page_idx": 27
    },
    {
        "type": "text",
        "text": "Policylnfo.PremiumPaymentStatus, Policylnfo.PaymentDate, Policylnfo.PaymentMethod, Policylnfo.AgentlD ",
        "page_idx": 27
    },
    {
        "type": "text",
        "text": "FROM ",
        "page_idx": 27
    },
    {
        "type": "text",
        "text": "Policylnfo ",
        "page_idx": 27
    },
    {
        "type": "text",
        "text": "WHERE Policylnfo.CustomerlD IN ( SELECT Customerlnfo.CustomerID FROM CustomerInfo ",
        "page_idx": 27
    },
    {
        "type": "text",
        "text": "WHERE",
        "page_idx": 27
    },
    {
        "type": "text",
        "text": "Customerlnfo.MaritalStatus $\\mathbf { \\tau } = \\mathbf { \\tau }$ 'Married'）",
        "page_idx": 27
    },
    {
        "type": "text",
        "text": "保险场景 SQL查询",
        "text_level": 1,
        "page_idx": 28
    },
    {
        "type": "text",
        "text": "3、查询所有未支付保费的保单号和客户姓名。",
        "page_idx": 28
    },
    {
        "type": "text",
        "text": "SELECT Policylnfo.PolicyNumber, Customerlnfo.Name   \nFROM PolicyInfo LEFT JOIN Customerlnfo ON Policylnfo.CustomerID $\\mathbf { \\tau } = \\mathbf { \\tau }$   \nCustomerlnfo.CustomerlD   \nWHERE Policylnfo.PremiumPaymentStatus $\\mathbf { \\tau } = \\mathbf { \\tau }$ 'Not Paid' ",
        "page_idx": 28
    },
    {
        "type": "text",
        "text": "4、找出所有理赔金额大于10000元的理赔记录并列出相关客户的姓名和联系电话。",
        "page_idx": 28
    },
    {
        "type": "text",
        "text": "SELECT Customerlnfo.Name, Customerlnfo.PhoneNumber   \nFROM Customerlnfo JOIN Policylnfo ON Customerlnfo.CustomerlD $\\mathbf { \\tau } = \\mathbf { \\tau }$   \nPolicylnfo.CustomerID JOIN ClaimInfo ON Policylnfo.PolicyNumber $\\mathbf { \\tau } = \\mathbf { \\tau }$   \nClaimInfo.PolicyNumber   \nWHERE Claimlnfo.ClaimAmount $>$ 10000; ",
        "page_idx": 28
    },
    {
        "type": "text",
        "text": "保险场景 SQL查询",
        "text_level": 1,
        "page_idx": 29
    },
    {
        "type": "text",
        "text": "5、查找代理人的姓名和执照到期日期，按照执照到期日期升序排序。",
        "page_idx": 29
    },
    {
        "type": "text",
        "text": "SELECT Name, LicenseExpirationDate FROM AgentInfo ORDER BY LicenseExpirationDate; ",
        "page_idx": 29
    },
    {
        "type": "text",
        "text": "6、获取所有保险产品的产品名称和保费，按照保费降序排序。",
        "page_idx": 29
    },
    {
        "type": "text",
        "text": "SELECT ProductName， Premium FROM ProductInfo ORDER BY Premium DESC; ",
        "page_idx": 29
    },
    {
        "type": "text",
        "text": "7、查询所有在特定销售区域工作的员工的姓名和职位。",
        "page_idx": 29
    },
    {
        "type": "text",
        "text": "SELECT Name， Position   \nFROM Employeelnfo   \nWHERE EmployeeID IN( SELECT EmployeeID FROM EmployeeInfo WHERE Location $\\mathbf { \\tau } = \\mathbf { \\tau }$ 'Sales Region 1   \n）； ",
        "page_idx": 29
    },
    {
        "type": "text",
        "text": "保险场景 SQL查询",
        "text_level": 1,
        "page_idx": 30
    },
    {
        "type": "text",
        "text": "8、找出所有年龄在30岁以下的客户，并列出其客户ID、姓名和出生日期。",
        "page_idx": 30
    },
    {
        "type": "text",
        "text": "SELECT Customerlnfo.CustomerlD, Customerlnfo.Name,   \nCustomerlnfo.DateOfBirth   \nFROM Customerlnfo   \nWHERE Customerlnfo.DateOfBirth $\\angle$ '1990-01-01' ",
        "page_idx": 30
    },
    {
        "type": "text",
        "text": "9、查找所有已审核但尚未支付的理赔记录，包括理赔号、审核人和审核日期",
        "page_idx": 30
    },
    {
        "type": "text",
        "text": "SELECT ",
        "page_idx": 30
    },
    {
        "type": "text",
        "text": "Claimlnfo.ClaimNumber, Claimlnfo.ClaimDate, Claimlnfo.ClaimType, Claimlnfo.ClaimAmount, ",
        "page_idx": 30
    },
    {
        "type": "text",
        "text": "Claimlnfo.ClaimStatus, Claimlnfo.ClaimDescription, Claimlnfo.BeneficiarylD, Claimlnfo.MedicalRecords, Claimlnfo.AccidentReport, Claimlnfo.ClaimHandler, Claimlnfo.ReviewDate, ClaimInfo.PaymentMethod, Claimlnfo.PaymentDate, ClaimInfo.DenialReason   \nFROM ClaimInfo   \nWHERE Claimlnfo.ClaimStatus $\\mathbf { \\tau } = \\mathbf { \\tau }$ 'Pending' ",
        "page_idx": 30
    },
    {
        "type": "text",
        "text": "保险场景 SQL查询",
        "text_level": 1,
        "page_idx": 31
    },
    {
        "type": "text",
        "text": "10、获取每个产品类型下的平均保费，以及该产品类型下的产品数量。",
        "page_idx": 31
    },
    {
        "type": "text",
        "text": "SELECT ProductType, AVG(Premium) AS AveragePremium, COUNT(PolicyNumber) AS PolicyCount   \nFROM Policylnfo AS pi   \nJOIN ProductInfo AS pi2   \nON pi.ProductID $\\mathbf { \\tau } = \\mathbf { \\tau }$ pi2.ProductID   \nGROUP BY ProductType; ",
        "page_idx": 31
    },
    {
        "type": "text",
        "text": "Prompt works! ",
        "text_level": 1,
        "page_idx": 32
    },
    {
        "type": "text",
        "text": "Thinking: 以下哪种prompt可以写出更好的sQL？",
        "page_idx": 32
    },
    {
        "type": "text",
        "text": "prompt $\\mathbf { \\tau } = \\mathbf { \\tau }$ f\"\"\"# language: SQL  \n/\\*  \n{query}你需要先判断需要哪个数据表和字段，  \n然后基于它们编写SQL。数据库中有以下数  \n据表:  \n=====  \n{table_description}  \n\\*/  \n# {query}\"\" 写法1",
        "page_idx": 32
    },
    {
        "type": "table",
        "img_path": "images/21998afab45fc14c0dc656508936111fc088955e28d98e30ce6c6f3606aae4bf.jpg",
        "table_caption": [],
        "table_footnote": [],
        "table_body": "<html><body><table><tr><td> prompt = f\"!</td><td>prompt = f\"\"\"- language: SQL</td></tr><tr><td>-- language: SQL</td><td>### Question: {query}</td></tr><tr><td>/*{query}</td><td>### Input: {create_sql}</td></tr><tr><td>以下是数据表</td><td>### Response:</td></tr><tr><td>=====</td><td>Here is the SQL query I have generated to</td></tr><tr><td>{table_description}</td><td>answer the question {query}':</td></tr><tr><td>=====</td><td>\"``sql</td></tr><tr><td>编写一条sQL: {query}</td><td></td></tr><tr><td>*/1 写法2</td><td>写法3</td></tr></table></body></html>",
        "page_idx": 32
    },
    {
        "type": "text",
        "text": "table_description是数据表的中文描述，create_sql是数据表的建表语句，query是用户查询的问题",
        "page_idx": 32
    },
    {
        "type": "text",
        "text": "Prompt works! ",
        "text_level": 1,
        "page_idx": 33
    },
    {
        "type": "text",
        "text": "Prompt写法很重要",
        "text_level": 1,
        "page_idx": 33
    },
    {
        "type": "text",
        "text": "1）说明语言类型，--language:SQL   \n2）将SQL建表语句放到sQLprompt中，因为大语   \n言是通过SQL建表语句进行识别的   \n3）SQL编写用\\`\\`\\`sql，放到prompt最后   \nPrompt中的首尾很重要   \nprompt $\\mathbf { \\tau } = \\mathbf { \\tau }$ f\"-- language: SQL   \n### Question: {query}   \n### Input: {create_sql}   \n### Response:   \nHere is the SQL query I have generated to   \nanswer the question {query}':   \n\\`\\`sql   \n1-=\\` ",
        "page_idx": 33
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 33
    },
    {
        "type": "text",
        "text": "打卡：Text2SQL",
        "text_level": 1,
        "page_idx": 34
    },
    {
        "type": "text",
        "text": "在你的工作中，都有哪些SQL查询的场景？（对应的数据表、SQL查询语句，LLM能否完  \n成，是否有临时SQL的需求)  \n使用LangChain或者vanna或者自己调用大模型来完成  \n可以使用heros数据表，或者用自己本地的MySQL数据表",
        "page_idx": 34
    },
    {
        "type": "text",
        "text": "CASE: 业务分析助手",
        "page_idx": 35
    },
    {
        "type": "text",
        "text": "业务助手",
        "text_level": 1,
        "page_idx": 36
    },
    {
        "type": "text",
        "text": "业务助手：",
        "page_idx": 36
    },
    {
        "type": "text",
        "text": "为环球影城打造业务助手，通过自然语言交互的方式，对主营业务（门票、酒店、餐饮）进行洞察",
        "page_idx": 36
    },
    {
        "type": "text",
        "text": "助手的工作职责包括：",
        "page_idx": 36
    },
    {
        "type": "text",
        "text": "1）自助式数据查询  \n2）影响主营业务的关键因素分析  \n3）决策建议",
        "page_idx": 36
    },
    {
        "type": "text",
        "text": "我看到2023年第31周的数据有异常，能否针对那一周，按照天、不同销售渠道进行聚合，给我他们的销售表现",
        "page_idx": 36
    },
    {
        "type": "text",
        "text": "2024/3/1 11:11:45 ",
        "page_idx": 36
    },
    {
        "type": "image",
        "img_path": "images/9e35647a294f6b65d777f45d0aef583d2effb6cc9a600ff3e64457f65455bc06.jpg",
        "img_caption": [],
        "img_footnote": [],
        "page_idx": 36
    },
    {
        "type": "text",
        "text": "SQL查询 ",
        "text_level": 1,
        "page_idx": 37
    },
    {
        "type": "text",
        "text": "数据表：",
        "text_level": 1,
        "page_idx": 37
    },
    {
        "type": "text",
        "text": "1) crs_orders酒店预定订单表",
        "page_idx": 37
    },
    {
        "type": "text",
        "text": "2） eco_orderseco订单表，订单中台，汇总了各类订单信息",
        "page_idx": 37
    },
    {
        "type": "table",
        "img_path": "images/375a623ebed40a218ef486b1265bacf22bbf02e77c044aa77cdfcf799aab528f.jpg",
        "table_caption": [],
        "table_footnote": [],
        "table_body": "<html><body><table><tr><td>order_time</td><td>account_icgov_id</td><td></td><td>gender</td><td>age</td><td>province</td><td>SKU</td><td>product_ser eco_main_o sales_chann status</td><td></td><td></td><td></td><td> order_value quantity</td></tr><tr><td>2023-01-01 00:00:27</td><td>10457</td><td>1DD8B女</td><td></td><td>43</td><td>湖南省</td><td></td><td></td><td>Unive NHK-402-7ANVRI-899i B2C_UBRAF active</td><td></td><td>1898.86</td><td>9</td></tr><tr><td>2023-01-01 00:03:50</td><td>10952</td><td>7E416D男</td><td></td><td>17北京市</td><td></td><td></td><td></td><td>Unive WJH-733-9'CATHJ-891:B2C_UBRAF active</td><td></td><td>4215.64</td><td>3</td></tr><tr><td>2023-01-01 00:05:55</td><td>10823</td><td>98D70B女</td><td></td><td>45</td><td>湖南省</td><td></td><td></td><td>Unive WXC-477-4 DTHMY-03: B2B_TTAGI1 active</td><td></td><td>1983.44</td><td>9</td></tr><tr><td>2023-01-01 00:09:12</td><td>10263</td><td>9A886F</td><td>男</td><td>45</td><td>北京市</td><td></td><td></td><td>UniveLQW-579-1 MVCIM-964 B2B_OTA</td><td>active</td><td>1255.06</td><td>6</td></tr><tr><td>2023-01-01 00:12:43</td><td>10147</td><td>56BE69女</td><td></td><td>33江苏省</td><td></td><td></td><td></td><td>Unive ZVG-281-42 KXXGS-325:B2C_UBRAF active</td><td></td><td>3056.31</td><td>6</td></tr><tr><td>2023-01-01 00:14:35</td><td>10467</td><td>6D3C2A女</td><td></td><td>22</td><td>江苏省</td><td></td><td></td><td>VIP E CWG-889-6 ULREQ-000 B2B_OTA</td><td>active</td><td>3406.77</td><td>6</td></tr><tr><td>2023-01-01 00:16:16</td><td>10052</td><td>50B482</td><td>男</td><td>22</td><td>北京市</td><td></td><td></td><td>USB/JDC-378-39 TVJQ-8313 B2B_TTAGI1 active</td><td></td><td>891.45</td><td>4</td></tr><tr><td>2023-01-01 00:18:54</td><td>10002</td><td>D319C4男</td><td></td><td>30</td><td>上海市</td><td></td><td></td><td>USB，RWS-564-1.RQAFV-791 B2B_OTA</td><td>Void</td><td>3497.97</td><td>10</td></tr><tr><td>2023-01-01 00:20:41</td><td>10882</td><td>59383A男</td><td></td><td>32山东省</td><td></td><td></td><td></td><td>USB'AQG-640-3 VDJEY-6972 B2B_OTA</td><td>active</td><td>4898.33</td><td>5</td></tr><tr><td>2023-01-01 00:21:04</td><td>10356</td><td>C8581B女</td><td></td><td>29</td><td>北京市</td><td></td><td></td><td>Unive KKG-127-0 ARJFN-811: B2C_UBRAF active</td><td></td><td>1093.77</td><td>3</td></tr><tr><td>2023-01-01 00:21:24</td><td>10517</td><td>F8B058I</td><td>女</td><td>21北京市</td><td></td><td></td><td></td><td>Unive SZE-379-08 JVPPC-207εB2B_TTAGI1Full ref</td><td></td><td>303.2</td><td>8</td></tr><tr><td>2023-01-01 00:24:25</td><td>10079</td><td>AED963男</td><td></td><td>12北京市</td><td></td><td></td><td></td><td>Unive BZM-310-1'JNPBT-815'B2B_OTA</td><td>Inactive</td><td>903.05</td><td>5</td></tr><tr><td>2023-01-01 00:29:26</td><td>10046</td><td>BE3D40女</td><td></td><td>35天津市</td><td></td><td></td><td></td><td>Unive XVE-248-17 XXHOQ-49( B2B_OTA</td><td>active</td><td>792.23</td><td>4</td></tr><tr><td>2023-01-01 00:31:59</td><td>10675</td><td>A8D567女</td><td></td><td>13河南省</td><td></td><td></td><td></td><td>Unive BFG-213-74 KCBIZ-4982 B2B_TTAGI1 Void</td><td></td><td>1549.06</td><td>4</td></tr><tr><td>2023-01-01 00:32:44</td><td>10992</td><td>0CDB97</td><td>男</td><td>8上海市</td><td></td><td></td><td></td><td>Unive LSM-527-7² AWSBV-042B2B_OTA</td><td>active</td><td>2477.86</td><td>6</td></tr><tr><td>2023-01-0100:34:02</td><td>10597</td><td>19A289</td><td>女</td><td>42天津市</td><td></td><td></td><td></td><td>Unive FCJ-023-68:NOFCT-005 B2B_OTA</td><td>active</td><td>1127.7</td><td>9</td></tr><tr><td>2023-01-0100:35:14</td><td>10406</td><td>351DC1男</td><td></td><td>35北京市</td><td></td><td></td><td></td><td>USB’ZLH-681-7C QXHOL-55ε B2C_UBRAF active</td><td></td><td>3055.89</td><td>1</td></tr><tr><td>2023-01-01 00:36:07</td><td>10081</td><td>DA342∈女</td><td></td><td>26北京市</td><td></td><td></td><td></td><td>VIP E SCA-343-51 AMKFL-234 B2B_OTA</td><td>active</td><td>1426.91</td><td>1</td></tr><tr><td>2023-01-0100:40:21</td><td>10570</td><td>39E7BD</td><td>男</td><td>34云南省</td><td></td><td></td><td></td><td>Unive SSW-336-4:YJJBB-1975:B2B_OTA</td><td>active</td><td>4157.96</td><td>6</td></tr><tr><td>2023-01-0100:41:02</td><td>10095</td><td>5834A6女</td><td></td><td>26北京市</td><td></td><td></td><td></td><td>Unive HRM-773-3 KMITH-363B2B_OTA</td><td>active</td><td>3809.84</td><td>3</td></tr><tr><td>2023-01-01 00:41:51</td><td>10301</td><td>837C11</td><td>女</td><td>42</td><td>河北省</td><td></td><td></td><td>Unive WSM-995-C QFRXR-101 B2B_OTA</td><td> active</td><td>631.38</td><td>9</td></tr><tr><td>2023-01-0100:45:09</td><td>10500</td><td>355632l</td><td>男</td><td>16辽宁省</td><td></td><td></td><td></td><td>UniveEXT-473-30 AQRXM-92:B2B_OTA</td><td>Inactive</td><td>3018.57</td><td>1</td></tr><tr><td>2023-01-01 00:47:53</td><td>10739</td><td>99F5E3男</td><td></td><td>31</td><td>甘肃省</td><td></td><td></td><td>UniveMPQ-769-9 GNEIS-2231 B2B_OTA</td><td>active</td><td>2487.56</td><td>1</td></tr><tr><td>2023-01-0100:49:03</td><td>10647</td><td>27123A女</td><td></td><td>48山东省</td><td></td><td></td><td></td><td>Unive SSE-104-21.NTWTB-207 B2B_OTA</td><td>active</td><td>1049.62</td><td>7</td></tr><tr><td>2023-01-0100:49:20</td><td>10626</td><td>E7A253</td><td>男</td><td>42北京市</td><td></td><td></td><td></td><td>Unive XYZ-531-55 PSOZT-114 B2C_UBRAF active</td><td></td><td>4498.59</td><td>2</td></tr><tr><td>2023-01-01 00:51:19</td><td>10424</td><td>6873E8女</td><td></td><td>35浙江省</td><td></td><td></td><td></td><td>UniveKBE-373-69 STEOD-751 B2B_OTA</td><td>active</td><td>3331.62</td><td>7</td></tr><tr><td>2023-01-0100:52:58</td><td>10358</td><td>D3A1D(女</td><td></td><td>39广东省</td><td></td><td></td><td></td><td>USB’CWA-936-9 IQCDU-314 B2B_OTA</td><td>active</td><td>1780.02</td><td>4</td></tr><tr><td>2023-01-01 00:53:53</td><td>10569</td><td>E6FB3B女</td><td></td><td>44吉林省</td><td></td><td></td><td></td><td>Unive RSG-139-62 QQQKX-82: B2B_OTA</td><td>active</td><td>2957.08</td><td>5</td></tr><tr><td>2023-01-01 00:58:27</td><td>10606</td><td>855599:男</td><td></td><td>21上海市</td><td></td><td></td><td></td><td>Unive DOK-618-7BKGYZ-793l B2B_OTA</td><td>Void</td><td>4038.16</td><td>2</td></tr><tr><td>2023-01-01 01:00:10</td><td>10979</td><td>3A29E8</td><td>男</td><td>44北京市</td><td></td><td></td><td></td><td>Unive HHM-530-1 CVIBl-0664( B2B_OTA</td><td>active</td><td>1255.21</td><td>6</td></tr><tr><td>2023-01-01 01:00:11</td><td>10362</td><td>F40674l女</td><td></td><td>44江苏省</td><td></td><td></td><td></td><td>USB，OSH-459-4i PGNDN-06: B2B_OTA</td><td>active</td><td>3135.67</td><td>10</td></tr><tr><td>2023-01-0101:03:27</td><td>10880</td><td>F2A0CB女</td><td></td><td>30</td><td>山东省</td><td></td><td></td><td>Unive PNH-624-4 EZTGQ-452 B2B_OTA</td><td>Upgrac</td><td>2911.14</td><td>1</td></tr><tr><td>2023-01-01 01:04:55</td><td>10130</td><td>6F92D7</td><td>女</td><td>61湖北省</td><td></td><td></td><td></td><td>USB，CTI-719-93MTLNJ-598 B2B_OTA</td><td>active</td><td>4293.75</td><td>7</td></tr><tr><td>2023-01-01 01:04:59</td><td>10987</td><td>E7COB9女</td><td></td><td>36河北省</td><td></td><td></td><td></td><td>Unive KWS-615-5: JRMXN-994 B2C_UBRAF active</td><td>System</td><td>1183.49 2036.49</td><td>2 3</td></tr><tr><td>2023-01-01 01:05:04 2023-01-01 01:05:26</td><td>10005 10660</td><td>AEE391 B9E5B3</td><td>男 女</td><td>33 4四川省</td><td>山西省</td><td></td><td></td><td>Unive BAH-867-5: RQESJ-711& B2B_OTA Unive ZBS-163-03 YZFDZ-692B2B_OTA</td></table></body></html>",
        "page_idx": 37
    },
    {
        "type": "text",
        "text": "3） tkt_orders门票类产品订单表，包含具体到门票票号",
        "page_idx": 37
    },
    {
        "type": "text",
        "text": "4） tkt_redemption门票类产品核销表，包含具体到门票票号",
        "page_idx": 37
    },
    {
        "type": "text",
        "text": "SQL查询需求 ",
        "text_level": 1,
        "page_idx": 38
    },
    {
        "type": "text",
        "text": "1） 酒店日报Bot:Q1：11月1日的酒店销售情况如何？",
        "page_idx": 38
    },
    {
        "type": "text",
        "text": "2）门票助手：Q1：查询2023年6、7、8月，所售一日门票、二日门票的销售数量，按周聚合，计算销售数量",
        "page_idx": 38
    },
    {
        "type": "text",
        "text": "3）餐饮分析助手：Q1：万圣节期间的年卡用户园内人均餐饮消费有多少？",
        "page_idx": 38
    },
    {
        "type": "table",
        "img_path": "images/3cb71c8563a948e43352387a1815db4d6f08c22f328cfac6ca726c00c62702b2.jpg",
        "table_caption": [],
        "table_footnote": [],
        "table_body": "<html><body><table><tr><td>订单日期</td><td>order_time</td></tr><tr><td>预定用户ID(tkt系统用户ID)</td><td>account_id</td></tr><tr><td>商品使用人ID</td><td>gov_id</td></tr><tr><td>使用人性别</td><td>gender</td></tr><tr><td>年龄</td><td>age</td></tr><tr><td>来源地，可细化到市粒度</td><td>province</td></tr><tr><td>商品SKU名（如标准一日票-成人优享 年卡-儿童票等）</td><td>SKU</td></tr><tr><td>商品ID（如门票票号每张票具备唯一 D)</td><td>product_serial_no</td></tr><tr><td>订单ID (与ECO订单ID相同)</td><td>eco_main_order_id</td></tr><tr><td>销售渠道</td><td>sales_channel</td></tr><tr><td>商品状态</td><td>status</td></tr><tr><td>订单金额</td><td>order_value</td></tr><tr><td>商品数量</td><td>quantity</td></tr></table></body></html>",
        "page_idx": 38
    },
    {
        "type": "text",
        "text": "SQL查询 ",
        "text_level": 1,
        "page_idx": 39
    },
    {
        "type": "text",
        "text": "Thinking: 如何设置门票助手bot",
        "text_level": 1,
        "page_idx": 39
    },
    {
        "type": "text",
        "text": "if bot $\\scriptstyle = =$ 门票助手': ",
        "page_idx": 39
    },
    {
        "type": "text",
        "text": "#得到用户查询的问题  \nmessages $\\mathbf { \\tau } = \\mathbf { \\tau }$ data  \n# 更换system prompt  \nmessages[O]['content'] $\\mathbf { \\tau } = \\mathbf { \\tau }$ ticket_bot.system_prompt  \n#创建生成器函数，以流形式获取并返回数据  \ndef generate():",
        "page_idx": 39
    },
    {
        "type": "text",
        "text": "yield from model_tools.exc_messages(messages $\\ c =$ messages, functions_desc=ticket_bot.functions_desc, database $= ^ { \\mathsf { I } }$ ubr', bot $\\mathop { \\bf { \\phi } } =$ bot) return Response(generate(), content_type $= ^ { \\mathsf { 1 } }$ text/event-stream', headers $\\ c =$ stream_headers) ",
        "page_idx": 39
    },
    {
        "type": "text",
        "text": "SQL查询 ",
        "text_level": 1,
        "page_idx": 40
    },
    {
        "type": "text",
        "text": "Thinking: 门票助手的system_prompt如何设置? ",
        "text_level": 1,
        "page_idx": 40
    },
    {
        "type": "text",
        "text": "system_prompt 我是环球影城门票助手， 个是关于门票订单表相关的字段，我可能会编写对应的SQL  \n--内票订单表  \nCREATE TABLEtkt_orders （order_time DATETIME, --订单日期account_id INT, -预定用户IDgov_id VARCHAR(18), -商品使用人ID（身份证号）gender VARCHAR(10), -使用人性别age INT, --年龄province VARCHAR(30), -使用人省份SKU VARCHAR(100), --商品SKU名product_serial_no VARCHAR(30), -商品IDeco_main_order_id VARCHAR(20), -订单IDsales_channel VARCHAR(20), 销售渠道status VARCHAR(30), --商品状态order_value DECIMAL(10,2), --订单金额quantity INT -商品数量  \n）；  \n一日内票，对应多种SKU：  \nUniversal Studios Beijing One-Day Dated Ticket-Standard  \nUniversal Studios Beijing One-Day Dated Ticket-Child  \nUniversal Studios Beijing One-Day Dated Ticket-Senior  \n二日内票，对应多种SKU：  \nUSB1.5-Day DatedTicket Standard  \nUSB 1.5-Day Dated Ticket Discounted  \n一日内票、二日内票查询  \nSUM(CASE WHEN SKU LIKE 'Universal Studios Beijing One-Day%' THEN quantity ELSE 0 END)AS  \nSUM(CASE WHEN SKU LIKE 'USB%' THEN quantity ELSE 0 END) AS tWO_day_ticket_sales  \n我将回答用户关于内票相关的问题",
        "page_idx": 40
    },
    {
        "type": "text",
        "text": "Thinking：设置system_prompt的目的是什么?",
        "page_idx": 40
    },
    {
        "type": "text",
        "text": "说明应用的目标：门票助手，帮用户查询数据通用信息：数据表结构",
        "page_idx": 40
    },
    {
        "type": "text",
        "text": "SQL查询 ",
        "text_level": 1,
        "page_idx": 41
    },
    {
        "type": "text",
        "text": "Thinking：function tool如何设置？比如针对生成的sQL语句，进 行SQL查询 ",
        "page_idx": 41
    },
    {
        "type": "text",
        "text": "functions_desc=[ { \"name\":\"exc_sql\" \"description\"：\"对于生成的sQL，进行sQL查询\", \"parameters\":{ \"type\":\"object\" \"properties\":{ \"sql_input\":{ \"type\":\"string\", \"description\"：\"生成的sQL语句\", \"required\": [\"sql_input\"] ",
        "page_idx": 41
    },
    {
        "type": "text",
        "text": "SQL查询 ",
        "text_level": 1,
        "page_idx": 42
    },
    {
        "type": "text",
        "text": "#传入之前的多轮对话，进行推理，会使用到自定义Tools=>更新messages   \ndef exc_messages(messages,functions_desc,database=\"\",bot=\"\"): while True: chat_response=chat_completion_request( messages,functions=functions_desc fn_name= #函数名称function name fn_arguments =' #函数参数 functionarguments for chunk in chat_response: #判断是否有function_call function_call = chunk.choices[e].delta.function_call if function_call is not None: iffunction_call.nameisnot None: fn_name = function_call.name fn_arguments += function_call.arguments #temp_data = data_processing.stream_data(function_call.arguments #temp_data = temp_data=chunk.model_dump_json(exclude_unset=True) #print(f\"data:{temp_data}\\n\\n\") yieldf\"data:{temp_data}\\n\\n\" ifchunk.choices[0].finish_reason=='stop': break print('fn_name=',fn_name) print('fn_arguments=',fn_arguments) #判断是否有fn_name iffn_name t=''： arguments_json = json.loads(fn_arguments) ",
        "page_idx": 42
    },
    {
        "type": "text",
        "text": "Thinking: 除了SQL数据查询， 能否进行数据建模 比如:",
        "page_idx": 43
    },
    {
        "type": "text",
        "text": "1）万圣节期间的年卡用户园内人均餐饮消费有多少？ (线性回归)  \n2）分析哪些因素对餐饮总营收的变大影响较大，诸如大型活动、节假日、票价、促销、天气等 (使用决策树)  \n3）分析哪些因素对餐饮人均消费影响较大，诸如大型活动、节假日、票价、促销、天气等 (使用决策树)",
        "page_idx": 43
    },
    {
        "type": "text",
        "text": "Thinking：针对问题1，能否让LLM自行进行推理？  \n餐饮消费总金额 $\\mathbf { \\tau } = \\mathbf { \\tau }$ type1_num \\* type1_revenue $+$ type2_num \\* type2_revenue $+$ type3_num \\* type3_revenue  \ntype1,type2,type3分别为数据表中3种类别的人群：年卡，门票，促销票",
        "page_idx": 43
    },
    {
        "type": "text",
        "text": "数据建模",
        "text_level": 1,
        "page_idx": 44
    },
    {
        "type": "text",
        "text": "Thinking: 在Ask Bot中， 让用户可以通过数据建模对业务进行洞察， 都需要哪些环节？",
        "page_idx": 44
    },
    {
        "type": "text",
        "text": "system_prompt=\"\"\"我是环球影城餐饮分析助手，以下是关于餐饮营收表相关的字段，我可能  \n-餐饮营收表  \nCREATE TABLE ubr_revenuedate DATE,ticket_price DECIMAL(10,2),operating_hours DECIMAL(5，2),total_attendance INT CoMMENT ‘总入园人数，=ap_attendance+ticket_attendanceap_attendanceINTCOMMENT‘年卡入园人数ticket_attendance INTCOMMENT'票入园人数promotional_ticket_attendance INTCoMMENT'促销票入园人数'，media_cost_indexDECIMAL(10，2)，marquee_eventVARCHAR（255） COMMENT'4代表万圣节'，max_temperature DECIMAL(5,2),min_temperature DECIMAL(5,2)，week_days VARCHAR(10),is_national_holiday BooLEAN,beijing_guest_ratio DECIMAL(5,2)age_groUP_0_3DECIMAL(10,9),age_grouP_4_12DECIMAL(10，9)，age_grouP_13_16DECIMAL(10,9)，age_grOUp_17_18DECIMAL（10，9)，age_groUP_19_25DECIMAL(10,9),age_groUp_26_35DECIMAL(10,9)，age_groUp_36_45DECIMAL(10,9)，age_grOUP_46_50DECIMAL(10，9)，age_groUP_51_65DECIMAL(10,9)，age_group_65_plusDECIMAL(10，9)，total_fb_revenueDECIMAL（10，2）COMMENT‘当天总餐饮消费（=年卡入园+巾票入园+促rev_per_capDECIMAL（10，2）COMMENT‘当天人均餐饮消费  \n1） system_prmpt  \n2）functions_desc工具定义  \nexc_sql：对于生成的SQL，进行SQL查询  \ncompute_avg_revenue：计算某类用户的园内人均餐饮消费  \nanalysis_influence_factors：分析哪些因素对餐饮消费（总消  \n费或人均消费）的变大影响较大  \nplot_image：如果有画图的python代码，可以通过它来绘制  \n图表",
        "page_idx": 44
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 44
    },
    {
        "type": "text",
        "text": "数据建模",
        "text_level": 1,
        "page_idx": 45
    },
    {
        "type": "text",
        "text": "关于计算人均餐饮消费的需求：",
        "text_level": 1,
        "page_idx": 45
    },
    {
        "type": "text",
        "text": "#用户关于计算人均餐饮消费的需求  \ndef lcompute_avg_revenue(attendance_type， marquee_event=0):print(f'attendance_type={attendance_type} marquee_event={marquee_event}')#Step1，通过marquee_event，获取指定的餐饮消费数据df = get_q3_data(engine， marquee_event)# Step2，基于之前的餐饮数据，构建LR模型 =>计算出 ap，ticket，promotional前面的系数model，dvec = build_lr_model(df)# Step3，洞察模型的 feature_importancefeature_df = compute_feature_importance(model， dvec)# Step4，整理输出结论content = make_conclusion(feature_df)return content",
        "page_idx": 45
    },
    {
        "type": "text",
        "text": "分析哪些因素对餐饮消费 (总消费或人均消费) 的变大影响较大",
        "text_level": 1,
        "page_idx": 45
    },
    {
        "type": "text",
        "text": "#分析哪些因素对餐饮消费（总消费或人均消费）的变大影响较大   \ndef analysis_influence_factors(target_type='总消费'): print('target_type='，target_type) target_map= {'总消费'：'total_fb_revenue'，'人均消费'：'rev_per_cap'} target = target_map[target_type] # 获取数据 df = get_q4_data(engine， target) # 通过决策树，构建餐饮消费模型 model， features = build_cart_model(df， target) #决策树可视化 result = cart_feature_importance(model， features) return result ",
        "page_idx": 45
    },
    {
        "type": "text",
        "text": "打卡：Text2SQL",
        "text_level": 1,
        "page_idx": 46
    },
    {
        "type": "text",
        "text": "在你的工作中，都有哪些SQL查询的场景？（对应的数据表、SQL查询语句，LLM能否完  \n成，是否有临时SQL的需求)  \n使用LangChain或者vanna或者自己调用大模型来完成  \n可以使用heros数据表，或者用自己本地的MySQL数据表",
        "page_idx": 46
    },
    {
        "type": "text",
        "text": "Thank You Using data to solve problems ",
        "text_level": 1,
        "page_idx": 47
    }
]
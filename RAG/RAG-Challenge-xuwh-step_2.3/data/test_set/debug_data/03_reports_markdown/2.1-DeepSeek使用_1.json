[
    {
        "type": "text",
        "text": "DeepSeek使用",
        "text_level": 1,
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "今天的学习目标",
        "text_level": 1,
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "DeepSeek使用",
        "text_level": 1,
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "·DeepSeek的创新   \nCASE：小球碰撞试验 (Cursor $+$ DeepSeek-R1)   \nDeepSeek私有化部署选择   \n·Ollama部署DeepSeek-R1   \nAPI调用DeepSeek ",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "DeepSeek的创新 ",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "DeepSeek-V3模型",
        "text_level": 1,
        "page_idx": 3
    },
    {
        "type": "image",
        "img_path": "images/a9c40ec0af020a94a0dc77315977fbb8d6536e36b0785e934ad4384fbf9ba026.jpg",
        "img_caption": [],
        "img_footnote": [],
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "DeepSeek-V3在推理速度上相较历史模型有了大幅提升。在目前大模型主流榜单中，DeepSeek-V3在开源模型中位列榜首，与世界上最先进的闭源模型不分伯仲。",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "DeepSeek-V3的训练成本",
        "text_level": 1,
        "page_idx": 4
    },
    {
        "type": "table",
        "img_path": "images/1d17ce03de35bb2ac5c3910a40fa86f1dd1876da0c990045fe64202e421e8a63.jpg",
        "table_caption": [],
        "table_footnote": [],
        "table_body": "<html><body><table><tr><td>Training Costs</td><td>Pre-Training</td><td>Context Extension</td><td>Post-Training</td><td>Total</td></tr><tr><td>in H800 GPU Hours</td><td>2664K</td><td>119K</td><td>5K</td><td>2788K</td></tr><tr><td>in USD</td><td>$5.328M</td><td>$0.238M</td><td>$0.01M</td><td>$5.576M</td></tr></table></body></html>",
        "page_idx": 4
    },
    {
        "type": "text",
        "text": "DeepSeek-V3的训练成本，假设H800的租用是\\$2/小时 ",
        "page_idx": 4
    },
    {
        "type": "text",
        "text": "DeepSeek-V3的推出是2024年12月，并没有太大波澜DeepSeek-R1火出圈，通过新的奖励机制GRPO (group relative policy optimization)，并使用规则类验证机制自动对输出进行打分。以V3为基础模型，一个多月内训练出了性能堪比GPT-o1的R1模型，成果非常亮眼。",
        "page_idx": 4
    },
    {
        "type": "text",
        "text": "DeepSeek-R1模型",
        "text_level": 1,
        "page_idx": 5
    },
    {
        "type": "image",
        "img_path": "images/d41b36721da3f0c37cb6991c78db92e7c12b66ffd8dfa4fa5d3b32980084e211.jpg",
        "img_caption": [],
        "img_footnote": [],
        "page_idx": 5
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 5
    },
    {
        "type": "text",
        "text": "DeepSeek-R1模型",
        "text_level": 1,
        "page_idx": 6
    },
    {
        "type": "text",
        "text": "DeepSeek-R1 ",
        "page_idx": 6
    },
    {
        "type": "text",
        "text": "DeepSeek-R1遵循MIT License，允许用户通过蒸馏技术借助R1训练其他模型。  \nDeepSeek-R1上线API，对用户开放思维链输出，通过设置model $\\models ^ { \\prime }$ deepseek-reasoner'即可调用。  \n2024-12-26 发布V3  \n2025-1-15 发布APP  \n2025-1-20 发布R1  \n多家企业宣布融合DeepSeek",
        "page_idx": 6
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 6
    },
    {
        "type": "text",
        "text": "MIT License是一种非常宽松的开源许可协议，允许用户自由地使用、修改、分发和商业化软件或模型。相比之下，Meta Llama的License相对严格，虽然LLaMA3是开源的，但许可协议限制了商业用途和对模型的修改，比如新的模型如果使用LLaMA，需要名称上带有LLaMA标识。",
        "page_idx": 6
    },
    {
        "type": "text",
        "text": "蒸馏小模型超越 OpenAl o1-mini ",
        "text_level": 1,
        "page_idx": 7
    },
    {
        "type": "text",
        "text": "在开源 DeepSeek-R1-Zero 和 DeepSeek-R1两个 660B 模型的同时，通过 DeepSeek-R1的输出，蒸馏了6 个小模型，其中32B和70B 模型在多项能力上实现了对标OpenAlo1-mini的效果。",
        "page_idx": 7
    },
    {
        "type": "table",
        "img_path": "images/a788466d26e4cdacbc41d21c58f68e997e398670818b8fa635df5916e2153aff.jpg",
        "table_caption": [],
        "table_footnote": [],
        "table_body": "<html><body><table><tr><td></td><td>AIME 2024 pass@1</td><td>AIME 2024 cons@64</td><td>MATH- 500 pass@1</td><td>GPQA Diamond pass@1</td><td>LiveCodeBench pass@1</td><td>CodeForces rating</td></tr><tr><td>GPT-4o-0513</td><td>9.3</td><td>13.4</td><td>74.6</td><td>49.9</td><td>32.9</td><td>759.0</td></tr><tr><td>Claude-3.5-Sonnet-1022</td><td>16.0</td><td>26.7</td><td>78.3</td><td>65.0</td><td>38.9</td><td>717.0</td></tr><tr><td>o1-mini</td><td>63.6</td><td>80.0</td><td>90.0</td><td>60.0</td><td>53.8</td><td>1820.0</td></tr><tr><td>QwQ-32B</td><td>44.0</td><td>60.0</td><td>90.6</td><td>54.5</td><td>41.9</td><td>1316.0</td></tr><tr><td>DeepSeek-R1-Distill-Qwen-1.5B</td><td>28.9</td><td>52.7</td><td>83.9</td><td>33.8</td><td>16.9</td><td>954.0</td></tr><tr><td>DeepSeek-R1-Distill-Qwen-7B</td><td>55.5</td><td>83.3</td><td>92.8</td><td>49.1</td><td>37.6</td><td>1189.0</td></tr><tr><td>DeepSeek-R1-Distill-Qwen-14B</td><td>69.7</td><td>80.0</td><td>93.9</td><td>59.1</td><td>53.1</td><td>1481.0</td></tr><tr><td>DeepSeek-R1-Distill-Qwen-32B</td><td>72.6</td><td>83.3</td><td>94.3</td><td>62.1</td><td>57.2</td><td>1691.0</td></tr><tr><td>DeepSeek-R1-Distill-Llama-8B</td><td>50.4</td><td>80.0</td><td>89.1</td><td>49.0</td><td>39.6</td><td>1205.0</td></tr><tr><td>DeepSeek-R1-Distill-Llama-70B</td><td>70.0</td><td>86.7</td><td>94.5</td><td>65.2</td><td>57.5</td><td>1633.0</td></tr></table></body></html>",
        "page_idx": 7
    },
    {
        "type": "text",
        "text": "DeepSeek的创新: MLA ",
        "text_level": 1,
        "page_idx": 8
    },
    {
        "type": "text",
        "text": "MLA (Multi-Head Latent Attention) ",
        "page_idx": 8
    },
    {
        "type": "text",
        "text": "Multi-Head Attention ",
        "page_idx": 8
    },
    {
        "type": "text",
        "text": "在\"Allyouneedisattention\"的背景下，传统的多头注意力（MHA，Multi-HeadAttention）的键值（KV）缓存机制事实上对计算效率形成了较大阻碍。缩小KV缓存（KVCache）大小，并提高性能，在之前的模型架构中并未很好的解决。",
        "page_idx": 8
    },
    {
        "type": "text",
        "text": "DeepSeek引入了MLA，一种通过低秩键值联合压缩的注意力机制， 在显著减小KV缓存的同时提高计算效率。",
        "page_idx": 8
    },
    {
        "type": "text",
        "text": "低秩近似是快速矩阵计算的常用方法，在MLA之前很少用于大模型计算。",
        "page_idx": 8
    },
    {
        "type": "text",
        "text": "从大模型架构的演进情况来看，Prefill和KVCache容量瓶颈的问题正一步步被新的模型架构攻克，巨大的KVCache正逐渐成为历史。（实际上在2024年6月发布的DeepSeek-V2就已经很好的降低了KVCache的大小)",
        "page_idx": 8
    },
    {
        "type": "image",
        "img_path": "images/6f38e11eabde864c2edfb6c1a301ef4276334bae3264248831fd4cc1aeb9defd.jpg",
        "img_caption": [],
        "img_footnote": [],
        "page_idx": 8
    },
    {
        "type": "text",
        "text": "DeepSeek的创新： DeepSeek-MoE ",
        "text_level": 1,
        "page_idx": 9
    },
    {
        "type": "image",
        "img_path": "images/76a117cb61bde5ab82253b29d204b6fb3d3f11a05863f0fc508cdd02e64c480c.jpg",
        "img_caption": [],
        "img_footnote": [],
        "page_idx": 9
    },
    {
        "type": "text",
        "text": "V3使用了61个MoE (Mixof Expert混合专家)block，虽然总参数量很大，但每次训练或推理时只激活了很少链路，训练成本大大降低，推理速度显著提高。",
        "page_idx": 9
    },
    {
        "type": "text",
        "text": "MoE类比为医院的分诊台，在过去所有病人都要找全科医生，效率很低。但是MoE模型相当于有一个分诊台将病人分配到不同的专科医生那里。DeepSeek在这方面也有创新，之前分诊是完全没有医学知识的保安，而现在用的是有医学知识的本科生来处理分流任务",
        "page_idx": 9
    },
    {
        "type": "text",
        "text": "DeepSeek的创新： 混合精度框架",
        "text_level": 1,
        "page_idx": 10
    },
    {
        "type": "image",
        "img_path": "images/dd5e2b41f7134b98bf596200f48261b6b777feb43a08918f0a8de779b34aa889.jpg",
        "img_caption": [],
        "img_footnote": [],
        "page_idx": 10
    },
    {
        "type": "text",
        "text": "整个混合精度框架使用了FP8数据格式，但为了简化说明，只展示了线性算子（Linear Operator）的部分采用了混合精度框架，即在不同的区块里使用不同的精度来存储数据。我们知道精度越高，内存占用越多，运算复杂度越大。DeepSeek在一些不需要很高精度的模块，使用很低的精度FP8储存数据，极大的降低了训练计算量。",
        "page_idx": 10
    },
    {
        "type": "text",
        "text": "Thinking: 为什么DeepSeek计算速度快， 成本低?",
        "page_idx": 11
    },
    {
        "type": "text",
        "text": "·架构设计方面",
        "page_idx": 11
    },
    {
        "type": "text",
        "text": "DeepSeekMoE架构：在推理时仅激活部分专家，避免了激活所有参数带来的计算资源浪费。",
        "page_idx": 11
    },
    {
        "type": "text",
        "text": "MLA架构：MLA通过降秩KV矩阵，减少了显存消耗.",
        "page_idx": 11
    },
    {
        "type": "text",
        "text": "·训练策略方面",
        "page_idx": 11
    },
    {
        "type": "text",
        "text": "多token预测（MTP）目标：在训练过程中采用多token预测目标，即在每个位置上预测多个未来token，增加了训练信号的密度，提高了数据效率。",
        "page_idx": 11
    },
    {
        "type": "text",
        "text": "混合精度训练框架：在训练中，对于占据大量计算量的通用矩阵乘法（GEMM）操作，采用FP8精度执行。同时，通过细粒度量化策略和高精度累积过程，解决了低精度训练中出现的量化误差问题。",
        "page_idx": 11
    },
    {
        "type": "text",
        "text": "Summary ",
        "text_level": 1,
        "page_idx": 12
    },
    {
        "type": "text",
        "text": "Thinking: 为什么DeepSeek-R1的推理能力强大？",
        "page_idx": 12
    },
    {
        "type": "text",
        "text": "·强化学习驱动：DepSeek-R1通过大规模强化学习技术显著提升了推理能力。在数学、代码和自然语言推理等任务上表现出色，性能与OpenAi的o1正式版相当。",
        "page_idx": 12
    },
    {
        "type": "text",
        "text": "·长链推理（CoT）技术：DeepSeek-R1采用长链推理技术，其思维链长度可达数万字，能够逐步分解复杂问题，通过多步骤的逻辑推理来解决问题",
        "page_idx": 12
    },
    {
        "type": "text",
        "text": "强化学习的作用：训练大模型，结合少量SFT，引入少量高质量监督数据（如数千个CoT示例）进行微调提升模型初始推理能力，再通过RL进一步优化，最终达到与OpenAIo1相当的性能长链推理CoT：CoT让AI模型逐步分解复杂问题，比如在智能客服、市场分析报告、AI辅助编程领域",
        "page_idx": 12
    },
    {
        "type": "text",
        "text": "Summary ",
        "text_level": 1,
        "page_idx": 13
    },
    {
        "type": "table",
        "img_path": "images/c82ae2cef1c2caea35fcbf540e60d2d4640462ca13418cea8eb2bb20efce4b01.jpg",
        "table_caption": [],
        "table_footnote": [],
        "table_body": "<html><body><table><tr><td>模型</td><td>方法</td></tr><tr><td>DeepSeek-R1-Zero 纯强化学习</td><td></td></tr><tr><td>DeepSeek-R1</td><td>冷启动 SFT -> RL->COT+通用数据 SFT（80w) ->全场景RL</td></tr><tr><td>蒸馏小模型</td><td>直接用上面的80w数据进行SFT</td></tr></table></body></html>",
        "page_idx": 13
    },
    {
        "type": "text",
        "text": "DeepSeek-R1-Zero首次验证了纯强化学习在LLM中能显著增强推理能力的可行性，即无需SFT，仅通过RL即可激励模型学会长链推理和反思。提出了多阶段训练策略 (冷启动 ${ \\tt > R L - > S F T - > }$ 全场景RL），有效兼顾准确率与可读性，产出 DeepSeek-R1，性能比肩 OpenAl-o1-1217。展示了知识蒸馏在提升小模型推理能力方面的潜力，并开源多个大小不一的蒸馏模型（1.5B\\~70B)",
        "page_idx": 13
    },
    {
        "type": "image",
        "img_path": "images/50361732aa3fb465002f73b584cbe431f539600081d1e25558444779f2c12144.jpg",
        "img_caption": [],
        "img_footnote": [],
        "page_idx": 13
    },
    {
        "type": "text",
        "text": "DeepSeek +Cursor使用:物理世界中的小球碰撞",
        "page_idx": 14
    },
    {
        "type": "text",
        "text": "DeepSeek +Cursor使用",
        "text_level": 1,
        "page_idx": 15
    },
    {
        "type": "text",
        "text": "在File $- >$ Preferences $$ Cursor Settings 中设置deepseek-r1和deepseek-v3模型",
        "page_idx": 15
    },
    {
        "type": "text",
        "text": "× ",
        "page_idx": 15
    },
    {
        "type": "text",
        "text": "在OpenAIAPIKey中进行设置，这里是采用OpenAI的协议，可以使用自定义的模型",
        "page_idx": 15
    },
    {
        "type": "text",
        "text": "区",
        "page_idx": 15
    },
    {
        "type": "text",
        "text": "区",
        "page_idx": 15
    },
    {
        "type": "text",
        "text": "Model Names ",
        "text_level": 1,
        "page_idx": 15
    },
    {
        "type": "text",
        "text": "Add new models to Cursor. Often used to configure the latest OpenAl models or OpenRouter models. ",
        "page_idx": 15
    },
    {
        "type": "image",
        "img_path": "images/75920a605861e6283c0ebad6b145898593abd60e22e0a0ce6d61f0510537dacd.jpg",
        "img_caption": [],
        "img_footnote": [],
        "page_idx": 15
    },
    {
        "type": "text",
        "text": "claude-3.5-sonnet ",
        "page_idx": 15
    },
    {
        "type": "image",
        "img_path": "images/7a938120f408522b3d7e9a66b2a3e83eb785be0c6bf0648901ece54791555f3d.jpg",
        "img_caption": [],
        "img_footnote": [],
        "page_idx": 15
    },
    {
        "type": "text",
        "text": "√ ",
        "page_idx": 15
    },
    {
        "type": "text",
        "text": "deepseek-r1 ",
        "page_idx": 15
    },
    {
        "type": "image",
        "img_path": "images/ffb93090843980ed331af577f2b8dfe9239cb9a9a6ef2bf60532ce93c4d8ee48.jpg",
        "img_caption": [],
        "img_footnote": [],
        "page_idx": 15
    },
    {
        "type": "text",
        "text": "deepseek-v3 ",
        "page_idx": 15
    },
    {
        "type": "text",
        "text": "OpenAl Key = skQ2gN9CgZOz9jrzjCCHkijalkUyaXpHS6xssmmkl327kkib0G ",
        "page_idx": 15
    },
    {
        "type": "text",
        "text": "OpenAl Base URL $\\mathbf { \\tau } = \\mathbf { \\tau }$ http://chatapi.littlewheat.com/v1 ",
        "page_idx": 15
    },
    {
        "type": "text",
        "text": "设置好deepseek-r1和deepseek-v3模型之后，可以在Cursor中选择该模型进行编程",
        "page_idx": 15
    },
    {
        "type": "text",
        "text": "cursor-small ",
        "page_idx": 15
    },
    {
        "type": "text",
        "text": "+ Add context一个红色的小球在三角区域内运动，碰到边界就反弹，编写一个HTML网页",
        "page_idx": 15
    },
    {
        "type": "text",
        "text": "OpenAl API Key ",
        "text_level": 1,
        "page_idx": 15
    },
    {
        "type": "text",
        "text": "deepseek-r1 ",
        "text_level": 1,
        "page_idx": 15
    },
    {
        "type": "text",
        "text": "normal/agentsubmit ",
        "page_idx": 15
    },
    {
        "type": "text",
        "text": "：",
        "page_idx": 15
    },
    {
        "type": "text",
        "text": "With your Cursor Pro subscription, you do not need to use your own OpenAl key unless you're using custom models. ",
        "page_idx": 15
    },
    {
        "type": "text",
        "text": "Dismiss ",
        "page_idx": 15
    },
    {
        "type": "text",
        "text": "Turn OffOpenAlKey ",
        "text_level": 1,
        "page_idx": 15
    },
    {
        "type": "text",
        "text": "You can putin your OpenAl key to use Cursor at public API costs.Note: this can cost more than pro and won't work for custom model features. ",
        "page_idx": 15
    },
    {
        "type": "image",
        "img_path": "images/91d88ada15d3533967a17a8e5f5082f03fd2cff82953e127948d249f9cbccae7.jpg",
        "img_caption": [],
        "img_footnote": [],
        "page_idx": 15
    },
    {
        "type": "text",
        "text": "Override OpenAl Base URL γ",
        "page_idx": 15
    },
    {
        "type": "text",
        "text": "http://chatapi.littlewheat.com/v1 ",
        "page_idx": 15
    },
    {
        "type": "text",
        "text": "CASE: 物理世界中的小球碰撞",
        "text_level": 1,
        "page_idx": 16
    },
    {
        "type": "text",
        "text": "<think> ",
        "text_level": 1,
        "page_idx": 16
    },
    {
        "type": "text",
        "text": "个红色的小球在三角区域内运动，碰到边界就反弹编写一个HTML网页",
        "page_idx": 16
    },
    {
        "type": "text",
        "text": "好的，我现在需要帮助用户创建一个在三角区域内反弹的小球的HTML页面。首先，我得考虑如何实现这个效果。用户想要一个红色小球在三角形内运动，碰到边界反弹。我需要用HTML5的Canvas来绘制图形和动画。",
        "page_idx": 16
    },
    {
        "type": "text",
        "text": "首先，我得确定三角形的边界。三角形通常有三个边，但检测碰撞可能会比较复杂。因为Canvas的路径是矢量，可能需要用数学方法来判断小球是否碰到三角形的边。或者，我可以将三角形视为三个线段，分别检测碰撞。",
        "page_idx": 16
    },
    {
        "type": "text",
        "text": "接下来是小球的运动。小球有位置(x,y）和速度（dx,dy)，每次动画帧更新位置。当碰到边界时，速度方向改变。但是，三角形的边界是斜边，所以反弹方向不能简单取反，需要计算反射向量。",
        "page_idx": 16
    },
    {
        "type": "text",
        "text": "这可能会比较复杂。用户可能希望简化处理，比如将三角形视为三个墙壁，每次碰撞后根据碰到的边反转速度的相应分量。或者，可能需要计算小球到各边的距离，判断是否发生碰撞，然后调整速度方向。",
        "page_idx": 16
    },
    {
        "type": "image",
        "img_path": "images/e3db899fc0ef96c1e4325fd37a7225bbe2a99281db7fc914e55c2d4bb38480f3.jpg",
        "img_caption": [],
        "img_footnote": [],
        "page_idx": 16
    },
    {
        "type": "text",
        "text": "考虑到用户可能希望代码简单，我先考虑一个等边三角形，顶点在上方，底边水平。这样三条边分别是左斜边、右斜边和底边。对于左右斜边，碰撞检测可能需要计算点是否在边的附近，并调整速度方向。",
        "page_idx": 16
    },
    {
        "type": "text",
        "text": "但这样做可能数学计算较多。或者，可以使用三个直线方程，检测小球的中心是否接近某条边，并计算反射方向。",
        "page_idx": 16
    },
    {
        "type": "text",
        "text": "另一个思路是使用边界框，将三角形的三个边作为反射面，当小球碰撞时，根据边的方向调整速度。例如，底边是水平的，碰撞时反转dy；左右边是斜的，碰撞时需要计算反射。这可能涉及到向量运算，比如计算反射向量。假设边的法线向量，然后根据入射速度计算反射速度。",
        "page_idx": 16
    },
    {
        "type": "text",
        "text": "不过，这样计算起来可能有点复杂，特别是对于初学者。有没有更简单的方法？比如，将三角形视为由三个线段组成，每次检测小球与这三个线段的碰撞，然后反弹。",
        "page_idx": 16
    },
    {
        "type": "text",
        "text": "或者，使用边界的斜率和小球的运动方向来判断碰撞。例如，当小球碰到左斜边时，根据边的斜率调整速度分量。",
        "page_idx": 16
    },
    {
        "type": "text",
        "text": "deepseek-r1会进行很长的思考，然后编写出HTML代码。编写的HTML代码运行可能不符合要求，需要进一步调整不过，这样可能需要较多的几何计算。为了简化，我可以假设三角形是一个等边三角形，三个边的方程已知，然后检测小球的中心是否接近某条边，并在碰撞时调整速度方向。",
        "page_idx": 16
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 16
    },
    {
        "type": "text",
        "text": "现在，我需要考虑如何表示三角形的边。例如，左斜边可能是从左上角到右下角，右斜边是从右上角到右下角，底边是水平的。假设三角形的顶点在画布的上中点，底边在底部。",
        "page_idx": 16
    },
    {
        "type": "text",
        "text": "接下来，小球的初始位置应该在三角形内部。当小球移动时，检查它是否超出了三角形的任何一边。如果超出，则反弹。",
        "page_idx": 16
    },
    {
        "type": "text",
        "text": "但如何判断点是否在三角形内？或者，当小球的中心碰到边时，视为碰撞。这可能需要进",
        "page_idx": 16
    },
    {
        "type": "text",
        "text": "CASE: 物理世界中的小球碰撞",
        "text_level": 1,
        "page_idx": 17
    },
    {
        "type": "text",
        "text": "基于之前的思考，帮我完善HTML",
        "text_level": 1,
        "page_idx": 17
    },
    {
        "type": "image",
        "img_path": "images/1a343bc54a09a5f0fb6fa38b22e5a7b9331727446fd39d5b3897d49d409c3357.jpg",
        "img_caption": [
            "红色小球在三角形区域内持续反弹运动"
        ],
        "img_footnote": [],
        "page_idx": 17
    },
    {
        "type": "text",
        "text": "HTML样式有了调整，但是小球还是会飞出三角区域，需要进一步调整",
        "page_idx": 17
    },
    {
        "type": "text",
        "text": "<think> ",
        "text_level": 1,
        "page_idx": 17
    },
    {
        "type": "text",
        "text": "好吧，用户希望完善之前的HTML，但当前的代码已经实现了基本功能。首先，我需要仔细检查代码，看看哪些地方可以改进。注意到用户提到之前的功能是正确的，所以不能破坏现有逻辑。",
        "page_idx": 17
    },
    {
        "type": "text",
        "text": "首先，界面方面，原生的canvas边框比较单调，可以考虑添加背景色或者渐变效果，让画面更吸引人。比如给画布加个渐变背景，这样视觉效果更好。",
        "page_idx": 17
    },
    {
        "type": "text",
        "text": "然后，动画流畅度方面，当前的移动速度是固定的，用户可能想要更自然的运动。可以考虑调整速度参数，比如使用小数，让运动更平滑。或者添加随机的速度变化，但要注意不能改变原有反弹逻辑。",
        "page_idx": 17
    },
    {
        "type": "text",
        "text": "界面文字提示也是一个改进点。可以在页面下方添加说明文字，比如使用CSS在body中添加一个div，说明这是三角区域反弹球，这样用户更清楚演示内容。",
        "page_idx": 17
    },
    {
        "type": "text",
        "text": "另外，小球的外观可以优化，比如添加阴影效果或者高光，让它看起来更立体。在drawBall函数里，用ctx.shadow来增加立体感。",
        "page_idx": 17
    },
    {
        "type": "text",
        "text": "代码可读性方面，可以添加更多注释，尤其是碰撞检测的部分，虽然用户可能已经了解，但清晰的注释有助于维护。比如在checkCollisionWithEdge函数中解释参数A和B代表边的两个端点。",
        "page_idx": 17
    },
    {
        "type": "text",
        "text": "检查是否存在中文乱码，确保HTML的meta标签有设置UTF-8。原来的代码没有<metacharset>，需要补充，这样中文注释和可能的文本就不会乱码。",
        "page_idx": 17
    },
    {
        "type": "text",
        "text": "最后，考虑响应式布局，让画布在不同设备上居中显示。可以通过CSS的flex布局让canvas居中，提升用户体验。",
        "page_idx": 17
    },
    {
        "type": "text",
        "text": "综合这些点，逐步修改代码，确保每一处改动都不影响原有功能。比如添加meta标签，修改背景样式，增加文字提示，美化小球外观，并调整速度参数。同时保持代码结构清晰，注释准确。",
        "page_idx": 17
    },
    {
        "type": "text",
        "text": "</think> ",
        "page_idx": 17
    },
    {
        "type": "text",
        "text": "我将在原有功能不变的基础上做以下改进优化：",
        "page_idx": 17
    },
    {
        "type": "image",
        "img_path": "images/fe4aa1efee159e9a5a5c502f3080704cb6faa75a8a2c3578dabab50293cd2348.jpg",
        "img_caption": [],
        "img_footnote": [],
        "page_idx": 17
    },
    {
        "type": "text",
        "text": "CASE: 物理世界中的小球碰撞",
        "text_level": 1,
        "page_idx": 18
    },
    {
        "type": "text",
        "text": "小球弹了之后，弹出去了啊，帮我检查代码",
        "text_level": 1,
        "page_idx": 18
    },
    {
        "type": "text",
        "text": "<think> ",
        "text_level": 1,
        "page_idx": 18
    },
    {
        "type": "text",
        "text": "好的，用户反馈说小球碰撞后弹出去了，我需要仔细检查代码中的碰撞检测逻辑。首先，查看checkCollisionWithEdge函数，注意到计算法线向量的方式可能有问题。",
        "page_idx": 18
    },
    {
        "type": "text",
        "text": "原计算法线方向的部分，使用的是最近的点的坐标减去起点A的坐标，再除以边长度，但这种计算是否垂直于边呢？假设边的向量是(B.x-A.x, B.y-A.y)，那么与其垂直的向量应该是（B.y - A.y，-(B.x - A.x)）或者相反方向。原代码中计算normal的x分量是(nearest.y -A.y)/edgeLength，这等于边的y分量除以长度，这可能错误地将边的方向当成了法线方向。",
        "page_idx": 18
    },
    {
        "type": "image",
        "img_path": "images/0622355e99629f69b763ee6dbe85f5b48ceaaa4e051173e38ed378ef635f5a90.jpg",
        "img_caption": [
            "红色小球在三角形区域内持续反弹运动"
        ],
        "img_footnote": [],
        "page_idx": 18
    },
    {
        "type": "text",
        "text": "正确的法线应该使用边的垂直向量。比如，边向量是 (edgeX,edgeY)，则法线应该是(edgeY，-edgeX）方向，并进行单位化。原代码中使用的是从最近点减去A点后的处理，这可能导致了法线方向错误，导致反射后的速度方向不正确，出现弹出问题。",
        "page_idx": 18
    },
    {
        "type": "text",
        "text": "需要修改normal的计算方式，使用边向量取垂直向量，确保法线方向正确，从而正确反射速度，这样小球就不会弹出边界了。",
        "page_idx": 18
    },
    {
        "type": "text",
        "text": "</think> ",
        "page_idx": 18
    },
    {
        "type": "text",
        "text": "经过检查，碰撞检测中的法线方向计算存在微小误差。我们需要修正法线向量计算方式：",
        "page_idx": 18
    },
    {
        "type": "image",
        "img_path": "images/9541a13a6522c1c1ddb433684cab82098a8a07c0464b0aa8ec4ee859a69bea2c.jpg",
        "img_caption": [],
        "img_footnote": [],
        "page_idx": 18
    },
    {
        "type": "text",
        "text": "问题原因与修正说明：",
        "page_idx": 18
    },
    {
        "type": "text",
        "text": "1.原法线方向计算错误：",
        "page_idx": 18
    },
    {
        "type": "text",
        "text": "直接告诉deepseek-r1遇到的错误，修正后，小球会在三角区域内进行运动",
        "page_idx": 18
    },
    {
        "type": "text",
        "text": "旧代码使用的计算方式会导致法线方向与实际边向量方向不一致修正后直接通过边向量计算法向量，确保方向准确",
        "page_idx": 18
    },
    {
        "type": "text",
        "text": "2.反射公式正确性验证：",
        "text_level": 1,
        "page_idx": 18
    },
    {
        "type": "text",
        "text": "normal.x = edge.y / edgeLength 和 normal.y = -edge.x / ",
        "page_idx": 18
    },
    {
        "type": "text",
        "text": "CASE: 物理世界中的小球碰撞",
        "text_level": 1,
        "page_idx": 19
    },
    {
        "type": "text",
        "text": "考虑小球的重力，以及三角区域的支撑力，小球的弹力进行完善",
        "page_idx": 19
    },
    {
        "type": "text",
        "text": "每次运行，小球可以从随机的任意方向抛出",
        "page_idx": 19
    },
    {
        "type": "text",
        "text": "小球的弹力大一些",
        "page_idx": 19
    },
    {
        "type": "text",
        "text": "最后到地面都垂直弹跳了，不是应该还会滚动么，就是有水平的速度",
        "page_idx": 19
    },
    {
        "type": "text",
        "text": "下面增加一个刷新按钮，可以重新执行这个HTML",
        "page_idx": 19
    },
    {
        "type": "text",
        "text": "中文显示是乱码，另外考虑到手机显示， 页面需要做自适应",
        "page_idx": 19
    },
    {
        "type": "image",
        "img_path": "images/0092cd7ff0702dab88d07bfed87cf38408fd9a23e3e37c34a82f5a7e71acc661.jpg",
        "img_caption": [],
        "img_footnote": [],
        "page_idx": 19
    },
    {
        "type": "text",
        "text": "'hinking：当我们写程序的时候，什么时候用DeepSeek-V3-0324，什么时候用DeepSeek-R1?",
        "page_idx": 20
    },
    {
        "type": "text",
        "text": "V3-0324：日常编程、快速开发、前端代码生成、常规脚本任务。",
        "page_idx": 20
    },
    {
        "type": "text",
        "text": "R1：数学密集型计算、复杂算法、代码逻辑深度优化、需要推理过程的任务。",
        "page_idx": 20
    },
    {
        "type": "text",
        "text": "$\\Rightarrow$ 更擅长复杂算法实现，能优化逻辑并减少错误 ",
        "page_idx": 20
    },
    {
        "type": "text",
        "text": "DeepSeek私有化部署",
        "page_idx": 21
    },
    {
        "type": "text",
        "text": "私有化部署 (DeepSeek模型)",
        "text_level": 1,
        "page_idx": 22
    },
    {
        "type": "table",
        "img_path": "images/bc20afa0ed4c79e50ca7ee5cf6f43bcaae2f697983ca4e620bb27a771894e7f8.jpg",
        "table_caption": [
            "DeepSeek-R1模型"
        ],
        "table_footnote": [],
        "table_body": "<html><body><table><tr><td>Model</td><td></td><td>#Total Params|#Activated Params</td><td>Context Length</td><td>Download</td></tr><tr><td>DeepSeek-R1-Zero</td><td>671B</td><td>37B</td><td>128K</td><td>https://modelscope.cn/models/deepseek-ai/DeepSeek-R1</td></tr><tr><td>DeepSeek-R1</td><td>671B</td><td>37B</td><td>128K</td><td>https://modelscope.cn/models/deepseek-ai/DeepSeek-R1-Zero</td></tr></table></body></html>",
        "page_idx": 22
    },
    {
        "type": "text",
        "text": "DeepSeek-R1蒸馏模型",
        "text_level": 1,
        "page_idx": 22
    },
    {
        "type": "table",
        "img_path": "images/b4d66cb47dc1ca23de17635da3e61733be400c9be83a907bdae9df53edd222c2.jpg",
        "table_caption": [],
        "table_footnote": [],
        "table_body": "<html><body><table><tr><td>Model</td><td>Base Model</td><td>Download</td></tr><tr><td>DeepSeek-R1-Distill-Qwen-1.5B</td><td>Qwen2.5-Math-1.5B</td><td>https://modelscope.cn/models/deepseek-ai/DeepSeek-R1-Distill-Qwen-1.5B</td></tr><tr><td>DeepSeek-R1-Distill-Qwen-7B</td><td>Qwen2.5-Math-7B</td><td>https://modelscope.cn/models/deepseek-ai/DeepSeek-R1-Distill-Qwen-7B</td></tr><tr><td>DeepSeek-R1-Distill-Llama-8B</td><td>Llama-3.1-8B</td><td>https://modelscope.cn/models/deepseek-ai/DeepSeek-R1-Distill-Qwen-14B</td></tr><tr><td>DeepSeek-R1-Distill-Qwen-14B</td><td>Qwen2.5-14B</td><td>https://modelscope.cn/models/deepseek-ai/DeepSeek-R1-Distill-Qwen-14B</td></tr><tr><td>DeepSeek-R1-Distill-Qwen-32B</td><td>Qwen2.5-32B</td><td>https://modelscope.cn/models/deepseek-ai/DeepSeek-R1-Distill-Qwen-32B</td></tr><tr><td>DeepSeek-R1-Distill-Llama-70B</td><td>Llama-3.3-70B-Instruct</td><td>https://modelscope.cn/models/deepseek-ai/DeepSeek-R1-Distill-Llama-70B</td></tr></table></body></html>",
        "page_idx": 22
    },
    {
        "type": "text",
        "text": "私有化部署 (DeepSeek模型)",
        "text_level": 1,
        "page_idx": 23
    },
    {
        "type": "text",
        "text": "放出来的1.5B、7B、14B等模型是Qwen/Ilama借助R1推理强化调出来的\"蒸馏\"版本，不是真正的R1。真正",
        "page_idx": 23
    },
    {
        "type": "text",
        "text": "的DeepSeek-R1是671B全量版 deepseek-r1:1.5b--1-2G显存 deepseek-r1:7b--6-8G显存 deepseek-r1:8b--8G显存 deepseek-r1:14b--10-12G显存 deepseek-r1:32b--24G-48显存 deepseek-r1:70b--96G-128显存 deepseek-r1:671b--496GB ",
        "page_idx": 23
    },
    {
        "type": "image",
        "img_path": "images/dd99eb7771ed29a7ebccc3be4e35e0a7e1b6a6e26a0853fb34ad8d5300a0f0b2.jpg",
        "img_caption": [],
        "img_footnote": [],
        "page_idx": 23
    },
    {
        "type": "text",
        "text": "https://modelscope.cn/search?search $\\ c =$ deepseek ",
        "page_idx": 23
    },
    {
        "type": "text",
        "text": "私有化部署 (DeepSeek模型)",
        "text_level": 1,
        "page_idx": 24
    },
    {
        "type": "table",
        "img_path": "images/67deff112bbb9f271325dc3d908b1589a645c578f7de447d54bb739dff6288e0.jpg",
        "table_caption": [
            "DeepSeekR1在英文上表现出色"
        ],
        "table_footnote": [],
        "table_body": "<html><body><table><tr><td>Category</td><td>Benchmark (Metric)</td><td>Claude-3.5-Sonnet-1022 GPT-4o 0513|DeepSeek V3OpenAl o1-miniOpenAl o1-1217 DeepSeek R1</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td>Architecture</td><td></td><td></td><td>MoE</td><td></td><td></td><td>MoE</td></tr><tr><td></td><td># Activated Params</td><td></td><td></td><td>37B</td><td></td><td></td><td>37B</td></tr><tr><td></td><td># Total Params</td><td>1</td><td>_</td><td>671B</td><td></td><td></td><td>671B</td></tr><tr><td>English</td><td>MMLU (Pass@1)</td><td>88.3</td><td>87.2</td><td>88.5</td><td>85.2</td><td>91.8</td><td>90.8</td></tr><tr><td></td><td>MMLU-Redux (EM)</td><td>88.9</td><td>88</td><td>89.1</td><td>86.7</td><td></td><td>92.9</td></tr><tr><td></td><td>MMLU-Pro (EM)</td><td>78</td><td>72.6</td><td>75.9</td><td>80.3</td><td></td><td>84</td></tr><tr><td></td><td>DROP (3-shot F1)</td><td>88.3</td><td>83.7</td><td>91.6</td><td>83.9</td><td>90.2</td><td>92.2</td></tr><tr><td></td><td>IF-Eval (Prompt Strict)</td><td>86.5</td><td>84.3</td><td>86.1</td><td>84.8</td><td></td><td>83.3</td></tr><tr><td></td><td>GPQA-Diamond (Pass@1)</td><td>65</td><td>49.9</td><td>59.1</td><td>60</td><td>75.7</td><td>71.5</td></tr><tr><td></td><td>SimpleQA (Correct)</td><td>28.4</td><td>38.2</td><td>24.9</td><td>7</td><td>47</td><td>30.1</td></tr><tr><td></td><td>FRAMES (Acc.)</td><td>72.5</td><td>80.5</td><td>73.3</td><td>76.9</td><td></td><td>82.5</td></tr><tr><td></td><td>AlpacaEval2.0 (LC-winrate)</td><td>52</td><td>51.1</td><td>70</td><td>57.8</td><td></td><td>87.6</td></tr><tr><td>ArenaHard (GPT-4-1106)</td><td></td><td>85.2</td><td>80.4</td><td>85.5</td><td>92</td><td>，</td><td>92.3</td></tr></table></body></html>",
        "page_idx": 24
    },
    {
        "type": "text",
        "text": "私有化部署 (DeepSeek模型)",
        "text_level": 1,
        "page_idx": 25
    },
    {
        "type": "table",
        "img_path": "images/654ec8c4b5b6a3af48569eba7c748c4509c9a39889fa62f0ad0f65d3d76937cd.jpg",
        "table_caption": [],
        "table_footnote": [
            "DeepSeek-R1在代码、数学、中文上表现出色"
        ],
        "table_body": "<html><body><table><tr><td>Category</td><td>Benchmark (Metric)</td><td>Claude-3.5-Sonnet-1022</td><td>GPT-4o 0513 DeepSeek V3OpenAl o1-mini OpenAl o1-1217 DeepSeek R1</td><td></td><td></td><td></td><td></td></tr><tr><td>Code</td><td>LiveCodeBench (Pass@1- COT)</td><td>33.8</td><td>34.2</td><td></td><td>53.8</td><td>63.4</td><td>65.9</td></tr><tr><td></td><td>Codeforces (Percentile)</td><td>20.3</td><td>23.6</td><td>58.7</td><td>93.4</td><td>96.6</td><td>96.3</td></tr><tr><td></td><td>Codeforces (Rating)</td><td>717</td><td>759</td><td>1134</td><td>1820</td><td>2061</td><td>2029</td></tr><tr><td></td><td>SWE Verified (Resolved)</td><td>50.8</td><td>38.8</td><td>42</td><td>41.6</td><td>48.9</td><td>49.2</td></tr><tr><td></td><td>Aider-Polyglot (Acc.)</td><td>45.3</td><td>16</td><td>49.6</td><td>32.9</td><td>61.7</td><td>53.3</td></tr><tr><td>Math</td><td>AIME 2024 (Pass@1)</td><td>16</td><td>9.3</td><td>39.2</td><td>63.6</td><td>79.2</td><td>79.8</td></tr><tr><td></td><td>MATH-500 (Pass@1)</td><td>78.3</td><td>74.6</td><td>90.2</td><td>90</td><td>96.4</td><td>97.3</td></tr><tr><td></td><td>CNMO 2024 (Pass@1)</td><td>13.1</td><td>10.8</td><td>43.2</td><td>67.6</td><td></td><td>78.8</td></tr><tr><td>Chinese</td><td>CLUEWSC (EM)</td><td>85.4</td><td>87.9</td><td>90.9</td><td>89.9</td><td></td><td>92.8</td></tr><tr><td></td><td>C-Eval (EM)</td><td>76.7</td><td>76</td><td>86.5</td><td>68.9</td><td></td><td>91.8</td></tr><tr><td></td><td>C-SimpleQA (Correct)</td><td>55.4</td><td>58.7</td><td>68</td><td>40.3</td><td>-</td><td>63.7</td></tr></table></body></html>",
        "page_idx": 25
    },
    {
        "type": "text",
        "text": "私有化部署 (DeepSeek模型)",
        "text_level": 1,
        "page_idx": 26
    },
    {
        "type": "table",
        "img_path": "images/8c3efff4ea5a12b7cd6858318840026cc792cd82cc5e384c37d38857675b22f4.jpg",
        "table_caption": [
            "DeepSeek-R1蒸馏模型的表现优于GPT-4o及Claude-3.5-Sonnet闭源模型"
        ],
        "table_footnote": [],
        "table_body": "<html><body><table><tr><td>Model</td><td>AIME 2024 pass@1</td><td>AIME 2024 cons@64</td><td>MATH-500 pass@1</td><td>GPQA Diamond pass@1</td><td>LiveCodeBench pass@1</td><td>CodeForces rating</td></tr><tr><td>GPT-40-0513</td><td>9.3</td><td>13.4</td><td>74.6</td><td>49.9</td><td>32.9</td><td>759</td></tr><tr><td>Claude-3.5-Sonnet-1022</td><td>16</td><td>26.7</td><td>78.3</td><td>65</td><td>38.9</td><td>717</td></tr><tr><td>01-mini QwQ-32B-Preview</td><td>63.6 44</td><td>80</td><td>90</td><td>60</td><td>53.8</td><td>1820</td></tr><tr><td>DeepSeek-R1-Distill-</td><td>28.9</td><td>60 52.7</td><td>90.6 83.9</td><td>54.5</td><td>41.9</td><td>1316</td></tr><tr><td>Qwen-1.5B DeepSeek-R1-Distil-</td><td></td><td></td><td></td><td>33.8</td><td>16.9</td><td>954</td></tr><tr><td>Qwen-7B DeepSeek-R1-Distil-</td><td>55.5</td><td>83.3</td><td>92.8</td><td>49.1</td><td>37.6</td><td>1189</td></tr><tr><td>Qwen-14B DeepSek-R1-Distil-</td><td>69.7</td><td>80</td><td>93.9</td><td>59.1</td><td>53.1</td><td>1481</td></tr><tr><td>DeepSeek-R1-Distill-</td><td>72.6</td><td>83.3</td><td>94.3</td><td>62.1</td><td>57.2</td><td>1691</td></tr><tr><td>Llama-8B</td><td>50.4</td><td>80</td><td>89.1</td><td>49</td><td>39.6</td><td>1205</td></tr><tr><td>DeepSeek-1-Distl</td><td>70</td><td>86.7</td><td>94.5</td><td>65.2</td><td>57.5</td><td>1633</td></tr></table></body></html>",
        "page_idx": 26
    },
    {
        "type": "text",
        "text": "私有化部署 （代码模型",
        "text_level": 1,
        "page_idx": 27
    },
    {
        "type": "table",
        "img_path": "images/544aafd05eb0a57277d8a391810a482508919c5cebe3bae456e16e63d1882c41.jpg",
        "table_caption": [],
        "table_footnote": [],
        "table_body": "<html><body><table><tr><td>Model</td><td>#Total Params</td><td>#Active Params</td><td>Context Length</td><td>Download</td></tr><tr><td>DeepSeek-Coder-V2-Lite-Base</td><td>16B</td><td>2.4B</td><td>128k</td><td>https://modelscope.cn/models/deepseek- ai/DeepSeek-Coder-V2-Lite-Base</td></tr><tr><td>DeepSeek-Coder-V2-Lite-Instruct</td><td>16B</td><td>2.4B</td><td>128k</td><td>https://modelscope.cn/models/deepseek- ai/DeepSeek-Coder-V2-Lite-Instruct</td></tr><tr><td>DeepSeek-Coder-V2-Base</td><td>236B</td><td>21B</td><td>128k</td><td>https://modelscope.cn/models/deepseek- ai/DeepSeek-Coder-V2-Base</td></tr><tr><td>DeepSeek-Coder-V2-Instruct</td><td>236B</td><td>21B</td><td>128k</td><td>https://modelscope.cn/models/deepseek- lai/DeepSeek-Coder-V2-Instruct</td></tr></table></body></html>",
        "page_idx": 27
    },
    {
        "type": "text",
        "text": "基于DeepSeekMoE框架发布了拥有160亿和2360亿参数的DeepSeek-Coder-V2。  \n其中，激活参数仅为24亿和210亿，这包括了基础模型和指令模型。",
        "page_idx": 27
    },
    {
        "type": "text",
        "text": "VIIm使用",
        "text_level": 1,
        "page_idx": 28
    },
    {
        "type": "text",
        "text": "VIIm使用：是由伯克利大学LMSYS组织开源的LLM高速推理框架，用于提升LLM的吞吐量与内存使用效率。它通过PagedAttention技术高效管理注意力键和值的内存，并结合连续批处理技术优化推理性能。vLLM支持量化技术、分布式推理、与HuggingFace模型无缝集成等功能",
        "page_idx": 28
    },
    {
        "type": "text",
        "text": ":rve deepseek-ai/DeepSeek-R1-Distill-Qwen-32B--tensor-paralel-size2 --max-model-len32768--enforce-eager ",
        "page_idx": 28
    },
    {
        "type": "text",
        "text": "vllmserve，启动vLLM推理服务的命令",
        "page_idx": 28
    },
    {
        "type": "text",
        "text": "·deepseek-ai/DeepSeek-R1-Distill-Qwen-32B，Hugging Face 模型库中的模型名称，vLLM会尝试从 HF下载模型·--tensor-parallel-size 2，启用张量并行，在2个GPU上分布式运行模型 (适合32B大模型)·--max-model-len32768，设置模型的最大上下文长度（32K tokens），确保能处理长文本。·--enforce-eager，禁用cUDA Graph 优化 (可能在某些环境下更稳定，但性能稍低)",
        "page_idx": 28
    },
    {
        "type": "text",
        "text": "VIIm使用",
        "text_level": 1,
        "page_idx": 29
    },
    {
        "type": "text",
        "text": "Thinking：如果我在本地的ubuntu下面有/root/autodl-tmp/models/tclf90/deepseek-r1-distillqwen-32b-gptq-int4,如何使用vIIm进行推理？",
        "page_idx": 29
    },
    {
        "type": "text",
        "text": "vllmserve/root/autodl-tmp/models/tclf90/deepseek-r1-distll-qwen-32b-gptq-int4--tensor-parallel-size1--max-model-len 32768 --enforce-eager --quantization gptq --dtype half",
        "page_idx": 29
    },
    {
        "type": "text",
        "text": "关键改动：指定本地路径：替换HF模型名为你的本地路径。",
        "page_idx": 29
    },
    {
        "type": "text",
        "text": "--quantization gptq:显式声明使用GPTQ量化。",
        "page_idx": 29
    },
    {
        "type": "text",
        "text": "--dtype：设为half（FP16）或auto（自动选择），因为GPTQ本身是4-bit，但计算时需指定中间精度。",
        "page_idx": 29
    },
    {
        "type": "text",
        "text": "Loading safetensors checkpoint shards: 0% Completed 0/4 [00:00<?, ?it/s] Loading safetensors checkpoint shards: 25% Completed 1/4 [00:00<00:02, 1.13it/s] Loading safetensors checkpoint shards: 50% Completed 2/4 [00:02<00:02, 1. 22s/it] Loading safetensors checkpoint shards: 75% Completed 3/4 [00:03<00:01, 1.22s/it] Loading safetensors checkpoint shards: 100% Completed 4/4 [00:04<00:00, 1.17s/it] Loading safetensors checkpoint shards: 100% Completed 4/4 [00:04<00:00, 1. 17s/it] ",
        "page_idx": 29
    },
    {
        "type": "text",
        "text": "ERROR 03-25 1:02:05 [core.py:340] RuntimeError: CUDA out of memory occurred when warming up sampler ase try lowering max_num_seqs\" orgpu_memory_utilization' when initializing the engine.   \nERROR 03-25 11:02:05 [c0re.py:340]   \nCRITICAL 03-25 11:02:05 [core_client.py:269] Got fatal signal from worker processes， shutting down. causeissue. ",
        "page_idx": 29
    },
    {
        "type": "text",
        "text": "VIlm使用",
        "text_level": 1,
        "page_idx": 30
    },
    {
        "type": "text",
        "text": "ierve /root/autodl-tmp/models/tclf90/deepseek-r1-distil-qwen-32b-gptq-int4-tensor-paralel-size1--maxmodel-len 4096 --quantization gptq --dtype half--gpu-memory-utilization 0.8--max-num-seqs8--enforce-eager ",
        "page_idx": 30
    },
    {
        "type": "text",
        "text": "INFO 03-25 11:06:45 [loader.py:429] Loading weights took 4.84 seconds   \nINFO_03-25_11:06:45_[gpu_model_runner.py:1176] Model loading took 18.1678 GB and 5.752492 seconds   \nERROR 03-25 11:06:47 [core.py:340] EngineCore hit an exception: Traceback (most recent call last):   \nEROR03-2511:06:47core.py:340]File\"/rot/miniconda3/b/python3.10/site-packages/vlm//engie/core.py\"，ine32inrn _engine_core   \nERROR 03-25 11:06:47 [core.py:340] engine_core = EngineCoreProc(\\*args，\\*\\*kwargs)   \nERROR 03-25 11:06:47 [core.py:340] File \"/root/miniconda3/lib/python3.10/site-packages/vllm/v1/engine/core.py\"，line 287,in__i nit   \nERROR 03-25 11:06:47 [core.py:340] super(.__init_(vllm_config，executor_class，log_stats)   \nERROR 03-25 11:06:47 [core.py:340] File \"/root/miniconda3/lib/python3.10/site-packages/vllm/v1/engine/core.py\"，line 62, in __in it   \nERROR 03-25 11:06:47 [c0re.py:340] num_gpu_blocks，num_cpu_blocks = self._initialize_kv_caches(   \nERROR 03-25 11:06:47 [core.py:340] File \"/root/miniconda3/lib/python3.10/site-packages/vllm/v1/engine/core.py\"，line 124，in _in itialize_kv_caches   \nERROR 03-25 11:06:47 [core.py:340] kv_cache_configs = get_kv_cache_configs(vllm_config,kv_cache_specs,   \nERROR 03-25 11:06:47 [core.py:340] File \"/root/miniconda3/lib/python3.10/site-packages/vllm/v1/core/kv_cache_utils.py\"， line 576 in get_kv_cache_configs   \nERROR 03-25 11:06:47 [c0re.py:340] check_enough_kv_cache_memory(vllm_config， kv_cache_spec,   \nERROR 03-25 11:06:47 [core.py:340] File \"/root/miniconda3/lib/python3.10/site-packages/vllm/v1/core/kv_cache_utils.py\"，line 468 ，in check_enough_kv_cache_memory   \nERROR 03-25 11:06:47 [core.py:340] raise ValueError(\"No available memory for the cache blocks.   \nEROR03-2511:06:47core.py:340]ValueError:Noavailablememoryforthecacheblocks.Tryincreasinggpu_memory_utiiationw hen initializing the engine.   \nERROR 03-25 11:06:47 [c0re.py:340]   \nCRITICAL 03-2511:06:47[core_client.py:269]Gotfatal signalfrom worker processesshuttingdown.Seestack traceabove forroot cause issue.   \nKilled ",
        "page_idx": 30
    },
    {
        "type": "text",
        "text": "尽管我们已经将参数调整到非常保守的配置(max-model-len $\\scriptstyle 1 = 4 0 9 6$ 、gpu-memory-utilization $_ { | = 0 . 8 }$ ），但32BGPTQ量化模型仍然无法在24GB GPU 上运行。",
        "page_idx": 30
    },
    {
        "type": "text",
        "text": "CASE: DeepSeek-R1-7B使用(GPU部署）",
        "page_idx": 31
    },
    {
        "type": "text",
        "text": "CASE: DeepSeek-R1-7B使用",
        "text_level": 1,
        "page_idx": 32
    },
    {
        "type": "text",
        "text": "#导入必要的库   \nfrom modelscope import AutoModelForCausalLM, AutoTokenizer   \n#设置模型路径   \nmodel_name $\\mathbf { \\tau } = \\mathbf { \\tau }$ \"/root/autodl-tmp/models/deepseek-ai/DeepSeek  \nR1-Distill-Qwen-7B\"   \n#加载模型   \n# torch_dtype $\\ c =$ \"auto\"自动选择合适的数据类型   \n#device_map=\"cuda\"指定使用GPU加速   \nmodel $\\mathbf { \\tau } = \\mathbf { \\tau }$ AutoModelForCausalLM.from_pretrained( model_name, torch_dtype $\\ c =$ \"auto\", device_map=\"cuda\"#也可以设置为\"auto\"自动选择设备   \n）   \n#加载对应的分词器   \ntokenizer $\\mathbf { \\tau } = \\mathbf { \\tau }$ AutoTokenizer.from_pretrained(model_name)   \n#设置用户输入的提示词   \nprompt $\\mathbf { \\tau } = \\mathbf { \\tau }$ \"帮我写一个二分查找法\"   \n#构建对话消息列表   \n$\\mathsf { m e s s a g e s } = [$ {\"role\": \"system\",\"content\": \"You are a helpful assistant.\"}, {\"role\": \"user\", \"content\": prompt}   \n]   \n#将消息转换为模型可接受的格式   \ntext $\\mathbf { \\tau } = \\mathbf { \\tau }$ tokenizer.apply_chat_template( messages, tokenize $\\ c =$ False, add_generation_prompt $\\mathbf { \\lambda } = \\mathbf { \\vec { \\lambda } }$ True ",
        "page_idx": 32
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 32
    },
    {
        "type": "text",
        "text": "CASE: DeepSeek-R1-7B使用",
        "text_level": 1,
        "page_idx": 33
    },
    {
        "type": "text",
        "text": "#将文本转换为模型输入格式并移动到正确的设备上   \nmodel_inputs $\\mathbf { \\tau } = \\mathbf { \\tau }$ tokenizer([text],   \nreturn_tensors $\\ c =$ \"pt\").to(model.device)   \n#将生成的token ID解码为文本   \n# skip_special_tokens $\\ c =$ True跳过特殊token   \nresponse $\\mathbf { \\tau } = \\mathbf { \\tau }$ tokenizer.batch_decode(generated_ids,   \nskip_special_tokens $\\ c =$ True)[0]   \n#打印生成的回复   \nprint(response)   \n#生成回复   \ngenerated_ids $\\mathbf { \\tau } = \\mathbf { \\tau }$ model.generate( \\*\\*model_inputs, max_new_tokens $\\ c =$ 2000   \n） ",
        "page_idx": 33
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 33
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 33
    },
    {
        "type": "text",
        "text": "嗯，我现在要学习一下二分查找法，也就是二分查找。我对这个算法不是很熟悉，但我知道它是一种高效的查找方法，特别是在有序数组中。让我先理清思路，然后一步步来。",
        "page_idx": 33
    },
    {
        "type": "text",
        "text": "首先，二分查找的基本思想是将一个数组不断对半分，然后在分好的两部分中继续查找，直到找到目标元素。这种方法的时间复杂度是0(1ogn)，这比线性查找要快很多，特别是当数组很大时。",
        "page_idx": 33
    },
    {
        "type": "text",
        "text": "那具体步骤是什么呢？我记得应该是先确定数组的中点，然后比较中点处的元素和目标元素的大小。如果中点处的元素等于目标，就找到了；如果目标比中点小，那么在左边继续查找；如果目标比中点大，则在右边继续查找。这个过程不断重复，直到找到目标或者数组遍历完毕。",
        "page_idx": 33
    },
    {
        "type": "text",
        "text": "举个例子，假设有一个有序数组：[1,3,5,7,9,1,13,15]，我要找数字7。首先，数组的长度是8，中点应该是第4个元素，也就是7的位置。所以直接找到了。但如果我要找的是数字6，那么中点是7，比6大，所以应该在左边继续查找。然后新的子数组是[1,3,5]，中点是3的位置，元素是5。6比5大，所以继续在右边查找。新的子数组是[5,7]，中点是6的位置，元素是7。但是6比7小，所以继续在左边查找，但左边只有一个元素5，比较后发现6不在数组中。",
        "page_idx": 33
    },
    {
        "type": "text",
        "text": "那么，二分查找的关键点在于数组必须是有序的，并且每次查找都要计算中点，并根据比较结果调整左右边界。那具体怎么在代码中实现呢？",
        "page_idx": 33
    },
    {
        "type": "text",
        "text": "我记得通常会用一个循环，初始时左边界left=0，右边界right=n-1。然后计算中点mid=(left+right)/2。如果数组[mid]等于目标，返回mid；否则，如果目标小于数组[mid]，则right=mid-1，继续在左边查找；否则，left=mid+1，继续在右边查找。直到left>right时，说明没找到。",
        "page_idx": 33
    },
    {
        "type": "text",
        "text": "那我来试着写一个伪代码：",
        "page_idx": 33
    },
    {
        "type": "text",
        "text": "#提取生成的文本部分 (去除输入部分)   \ngenerated_ids $\\mathbf { \\sigma } = \\mathbf { \\sigma }$ [ output_ids[len(input_ids):] for input_ids, output_ids in   \nzip(model_inputs.input_ids,generated_ids)   \n] ",
        "page_idx": 33
    },
    {
        "type": "text",
        "text": "function binary_search(array，target): left = 0 right $\\mathbf { \\Psi } = \\mathbf { \\Psi }$ len(array)-1 while left $< =$ right: mid $\\mathbf { \\Sigma } = \\mathbf { \\Sigma }$ (left $^ +$ right）//2 if array[mid] $\\scriptstyle = =$ target: return mid elifarray[mid]<target: left $\\mathbf { \\sigma } = \\mathbf { \\sigma }$ mid +1 else: right $\\mathbf { \\sigma } = \\mathbf { \\sigma }$ mid -1 return -1 # 表示没找到 ",
        "page_idx": 33
    },
    {
        "type": "text",
        "text": "Ollama使用",
        "page_idx": 34
    },
    {
        "type": "text",
        "text": "Ollama官方主要支持macOs和Linux，但Windows用户也可以安装",
        "page_idx": 35
    },
    {
        "type": "text",
        "text": "方法1： 使用 WSL",
        "page_idx": 35
    },
    {
        "type": "text",
        "text": "Step1,打开PowerShell（管理员权限），运行：wsl--install  \n重启电脑后，WSL会自动完成安装（默认安装Ubuntu）  \nStep2,安装 Ollama  \n在 WSL 终端（Ubuntu） 中运行:curl -fsSL https://ollama.com/install.sh丨 sh  \nStep3，启动Ollama 服务  \nollama serve",
        "page_idx": 35
    },
    {
        "type": "text",
        "text": "(保持此终端运行，另开一个新终端进行后续操作)",
        "page_idx": 35
    },
    {
        "type": "text",
        "text": "方法2:直接下载Windows版",
        "text_level": 1,
        "page_idx": 36
    },
    {
        "type": "text",
        "text": "https://ollama.com/ ",
        "page_idx": 36
    },
    {
        "type": "text",
        "text": "安装后，OIlama会作为服务运行（可在任务管理器查看）",
        "page_idx": 36
    },
    {
        "type": "text",
        "text": "Get up and running with large language models. ",
        "page_idx": 36
    },
    {
        "type": "text",
        "text": "Run Llama 3.3, DeepSeek-R1, Phi-4, Mistral, Gemma 3, and other models, locally. ",
        "page_idx": 36
    },
    {
        "type": "image",
        "img_path": "images/4150dd8d263d588e30235516ee552a77b22161087c914cd917f5c9886abc5935.jpg",
        "img_caption": [],
        "img_footnote": [],
        "page_idx": 36
    },
    {
        "type": "text",
        "text": "Ollama使用",
        "text_level": 1,
        "page_idx": 37
    },
    {
        "type": "text",
        "text": "Ollama官方模型库 https://ollama.com/library  \n下载deepseek-r1:1.5b 模型  \nollama pull deepseek-r1:1.5b  \n如果要删除该模型，可以使用  \nollama rm deepseek-r1:1.5b  \n运行该模型，使用  \nollama run deepseek-r1:1.5b  \nPS C:\\Windows\\System32> ollama run deepseek-r1:1.5b  \nvvv 你好啊  \n<think>  \n</think>  \n你好！很高兴见到你，有什么我可以帮忙的吗？",
        "page_idx": 37
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 37
    },
    {
        "type": "text",
        "text": "qwq ",
        "page_idx": 37
    },
    {
        "type": "text",
        "text": "QwQ is the reasoning model of the Qwen series. ",
        "page_idx": 37
    },
    {
        "type": "text",
        "text": "tools 32b ",
        "page_idx": 37
    },
    {
        "type": "text",
        "text": "↓ 1.1M Pulls $0$ 8 Tags $\\textcircled { \\scriptsize { \\perp } }$ Updated 2 weeks ago ",
        "page_idx": 37
    },
    {
        "type": "text",
        "text": "deepseek-r1 ",
        "text_level": 1,
        "page_idx": 37
    },
    {
        "type": "text",
        "text": "DeepSeek's first-generation of reasoning models with comparable performance to OpenAl-o1, including six dense models distilled from DeepSeek-R1 based on Llama and Qwen. ",
        "page_idx": 37
    },
    {
        "type": "text",
        "text": "1.5b 7b 8b 14b 32b 70b 671b ↓ 31.5M Pulls $0$ 29 Tags $\\textcircled { \\scriptsize { \\perp } }$ Updated 7 weeks ago ",
        "page_idx": 37
    },
    {
        "type": "text",
        "text": "CASE: DeepSeek-R1使用(API调用)",
        "page_idx": 38
    },
    {
        "type": "text",
        "text": "CASE: DeepSeek-R1使用-阿里代理",
        "text_level": 1,
        "page_idx": 39
    },
    {
        "type": "text",
        "text": "1、基本设置：",
        "text_level": 1,
        "page_idx": 39
    },
    {
        "type": "text",
        "text": "import dashscope   \nfrom dashscope.api_entities.dashscope_response import Role   \n# 设置 API key   \ndashscope.api_key $\\mathbf { \\tau } = \\mathbf { \\tau }$ \"your-api-key' ",
        "page_idx": 39
    },
    {
        "type": "text",
        "text": "2、模型调用封装:",
        "text_level": 1,
        "page_idx": 39
    },
    {
        "type": "text",
        "text": "def get_response(messages):response $\\mathbf { \\tau } = \\mathbf { \\tau }$ dashscope.Generation.call(model $\\mathsf { I } \\mathop { = } \\frac { \\boldsymbol { \\mathsf { I } } } { \\boldsymbol { \\mathsf { I } } }$ deepseek-r1'，#使用 deepseek-r1 模型messages $\\mathbf { \\tau } =$ messages,result_format $= ^ { \\prime }$ message'#将输出设置为message形式）return response",
        "page_idx": 39
    },
    {
        "type": "text",
        "text": "3、情感分析实现:",
        "text_level": 1,
        "page_idx": 39
    },
    {
        "type": "text",
        "text": "review $\\mathbf { \\sigma } = \\mathbf { \\sigma }$ '这款音效特别好给你意想不到的音质。‘   \nmessages =[ {\"role\":\"system\",\"content\":\"你是一名舆情分析师，帮我判断   \n产品口碑的正负向，回复请用一个词语：正向或者负向\"}, {\"role\": \"user\",\"content\": review}   \n]   \nresponse $\\mathbf { \\tau } = \\mathbf { \\tau }$ get_response(messages)   \nprint(response.output.choices[O].message.content) ",
        "page_idx": 39
    },
    {
        "type": "text",
        "text": "正向",
        "page_idx": 39
    },
    {
        "type": "text",
        "text": "Summary ",
        "text_level": 1,
        "page_idx": 40
    },
    {
        "type": "text",
        "text": "·大模型API是连接AI能力的桥梁，让开发者无需关注底层架构即可调用前沿AI能力，极大拓展了技术应用的边界。",
        "page_idx": 40
    },
    {
        "type": "text",
        "text": "·Prompt工程是激活大模型潜力的钥匙  \n结构化设计 (角色定义/分步指令/示例规范)  \n业务场景对齐(需求分析→Prompt迭代→效果验证)  \n性能优化技巧 (温度系数/输出限制/上下文管理)  \n·LLM正在重塑开发范式，通过大模型API接口覆盖NLP/CV/多模态任务",
        "page_idx": 40
    },
    {
        "type": "text",
        "text": "Thank You Using data to solve problems ",
        "text_level": 1,
        "page_idx": 41
    }
]
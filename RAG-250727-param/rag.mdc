# RAG系统开发规范

## 1. 基础开发规范

### 1.1 Git分支管理
- 每次开始新对话时，提醒检查当前分支
- 使用git进行代码版本管理
- 重要修改前先提交当前工作

### 1.2 代码修改原则
- 之前完成正确的功能，尽量不要修改
- 修改函数实现时，先理解原有逻辑，在基础上修改
- 保留之前的函数逻辑，不要随意移除
- 不要修改与本次修改内容无关的代码

### 1.3 代码生成规范
- 使用中文注释，UTF-8编码
- 检查中文乱码问题，及时修正
- 函数定义必须加上功能、参数及返回值注释
- 复杂代码需要添加注释说明实现功能

### 1.4 新文件创建规范
- 修改代码时，不要改动原文件，而是创建新文件
- 新文件头部注释说明功能特点及与其他版本的不同点
- 使用标准格式：
```python
'''
程序说明：

## 1. 功能描述

## 2. 与其他版本的区别

'''
```

## 2. 配置管理规范 ⭐

### 2.1 配置同步原则
**`v2_config.json` 和 `v2_config.py` 必须保持同步！**

### 2.2 修改配置流程

#### 添加新配置字段时：
1. ✅ 先在 `v2_config.py` 中定义 dataclass 字段
2. ✅ 再在 `v2_config.json` 中设置具体值
3. ✅ 确保类型匹配（int, float, bool, str, dict）

#### 修改配置值时：
- ✅ 直接修改 `v2_config.json`
- ✅ 不需要改 `v2_config.py`

#### 删除配置字段时：
1. ✅ 先从 `v2_config.py` 中删除
2. ✅ 再从 `v2_config.json` 中删除

### 2.3 配置字段定义规范

```python
# ✅ 正确：有默认值
@dataclass
class TextEngineConfigV2:
    new_field: str = "default_value"  # 有默认值

# ❌ 错误：没有默认值
@dataclass
class TextEngineConfigV2:
    new_field: str  # 没有默认值，JSON中也没有
```

### 2.4 常见错误示例

```python
# ❌ 错误：JSON中有字段，但dataclass中没有
{
  "text_engine": {
    "new_field": "value"  # 这个字段在TextEngineConfigV2中不存在
  }
}

# ❌ 错误：dataclass中有字段，但JSON中没有默认值
@dataclass
class TextEngineConfigV2:
    new_field: str  # 没有默认值，JSON中也没有
```

### 2.5 配置验证方法

每次修改配置后，运行以下命令验证：
```bash
python v2/config/v2_config.py
```

这会测试配置加载是否正常，如果有问题会报错。

## 3. 性能优化规范

### 3.1 分阶段开发
- 提供多步骤、复杂解决方案时，明确提示性能问题
- 进入大规模数据处理阶段时，主动提醒性能风险

### 3.2 实现选项
- 提供"逻辑直观但慢"和"高效但复杂"两种版本
- 解释优缺点，根据需求选择（debug vs 快速出结果）

### 3.3 执行监控
- 长时间运行的程序要有合理的控制台输出
- 避免误认为程序卡死

## 4. 错误避免规范

### 4.1 历史错误总结
- 配置不一致导致的运行时错误
- 中文乱码问题
- 函数注释缺失
- 配置字段类型不匹配

### 4.2 预防措施
- 每次修改配置后验证
- 代码生成后检查中文编码
- 重要修改前备份原文件

## 5. 参数管理规范

### 5.1 集中管理
- 许多参数都是集中管理的
- 修改参数时考虑全局影响

### 5.2 API密钥管理
- API_key的调用使用 `D:\image_text_RAG_sys\RAG-System\RAG-250727-param\config\api_key_manager.py`
- 不要硬编码API密钥

---

**记住：配置管理是系统稳定性的关键！每次修改配置都要验证同步性！** 🎯
description:
globs:
alwaysApply: false
---

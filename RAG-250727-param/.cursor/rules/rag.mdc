---
description:
globs:
alwaysApply: true
---
请使用中文回答问题,并用md格式

1、我们使用git进行代码管理，所以在第一次打开对话的时候，请提醒我检查现在在哪个分支上。

2、特别强调：在解决问题前，
仔细阅读代码，不急于修改
理解数据流和接口调用
对比已经调成功的同类型的流程是怎么实现的
找出真正的问题所在
制定完整的解决方案
并告知我问题原因，及行动计划，等我确认后再修改代码。

3、生成的代码和注释用中文，并使用 UTF-8 编码。
4、生成的代码有时候会存在中文乱码的情况，所以你在生成中文的时候，需要检查是否有中文乱码，如果有乱码需要修正。
5、如果修改某个函数的实现，先理解之前函数实现的逻辑。然后在原来的基础上进行修改（保留之前的函数逻辑，不要移除），也不要修改与本次修改内容没有关系的代码。让你重写代码的时候，不要随意抛弃之前代码中的优秀部分。
6、如果让你修改代码，生成新的文件，那就是不要改动原来的代码文件，而是将原代码及其修改放到新的代码文件中。
7、新的代码文件的头部注释是对该代码文件的功能特点的说明以及与其他版本的不同点。用以下格式
'''
程序说明：

## 1.

## 2.

'''
8、生成的代码中，如果是函数定义，则必须加上功能、参数及返回值的注释
 格式如下：
    """
    :function:
    :param deck: 
    :return: 
    """
9、比较复杂的代码，需要加上注释以便于理解其实现的功能
10、新的代码文件生成、新增或修改代码或功能时，一般要经历先调试后正式执行两个阶段，如果调试比较耗时，注意生成代码时可以实现调试和正式执行的方便切换。调试要减少代码运行时间，尽快发现代码问题。
同时注意：
-分阶段说明：在提供一个多步骤、复杂解决方案的初期，要明确提示性能方面可能存在的问题
-性能预警：当解决方案进入到可能涉及大规模数据处理或耗时操作的阶段时（例如从调试模式切换到全量数据模式），要主动提醒性能风险
-提供多种实现选项：如果可能，会同时提供一个“逻辑直观但慢”的版本和一个“高效但复杂”的版本，并解释其优缺点，让你根据当前的需求（是想debug还是想快速出结果）进行选择。
11、注意对于执行时间长的程序在控制台要有合理的输出，以避免误认为是程序运行被卡死。
12、注意以前犯过的错要尽量避免再次发生。
13、注意许多参数都是集中管理的
14，API_key的调用使用D:\image_text_RAG_sys\RAG-System\RAG-250727-param\config\api_key_manager.py




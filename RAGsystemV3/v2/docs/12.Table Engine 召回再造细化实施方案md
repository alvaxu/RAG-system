## **九、Table Engine 召回再造细化实施方案**

### **9.1 现状深度分析**

#### **当前实现状态评估**
**✅ 已完成的基础功能：**
- 基础的五层召回策略框架已搭建
- 配置管理统一化（`v2_config.py` 和 `v2_config.json`）已完成
- 基本的向量搜索、关键词搜索、混合搜索、模糊搜索、扩展搜索方法已实现
- 结果去重和排序逻辑已实现
- 配置验证和初始化流程已完善

**❌ 存在的核心问题：**
- 文档加载机制过于简化，缺乏错误处理和重试机制
- 搜索策略实现过于简单，缺乏深度和智能性
- 没有充分利用Table的特殊性（结构、类型、列名等）
- 缺乏对截断表格的智能处理
- 没有中文分词和语义处理支持
- 配置参数使用不够灵活，缺乏动态调整能力

#### **与Text Engine的差距分析**
**功能完整性对比：**
- **Text Engine**：完善的五层召回、中文分词、语义处理、错误处理、智能降级
- **Table Engine**：基础的五层框架，但实现深度不足，缺乏Table专用功能

**特殊功能对比：**
- **Text Engine**：支持多种相似度算法、智能降级、详细诊断、延迟加载
- **Table Engine**：缺乏Table专用的结构理解、智能处理、截断感知能力

#### **Table的特殊性分析**
**存储结构特点：**
- Table文档具有独特的元数据：`chunk_type: 'table'`、`table_id`、`table_type`、`table_row_count`、`table_column_count`
- 区别于纯文本的线性结构，表格具有二维结构和层次化信息

**处理流程特点：**
- 涉及专门的HTML表格解析、结构化文本转换（`document_processing/table_processor.py`）
- 智能分块（`document_processing/enhanced_chunker.py`），包括解析失败时的降级处理
- 支持表格类型识别、列名提取、数据类型分析

**搜索需求特点：**
- 需要考虑表格的二维结构、列名、表头、数据类型和表格类型匹配
- 支持"查找包含某列的数据"、"查找某类型的表格"等结构化查询
- 需要处理表格的截断状态和完整性信息

#### **大表截断处理机制分析**
**限制来源：**
- 受DashScope API的 `max_chunk_length` (2048字符) 限制
- 受 `config/settings.py` 中的 `max_table_rows` (100行) 限制

**智能截断策略（`document_processing/enhanced_chunker.py`）：**
- **格式优化阶段**：对于长度适中的表格，优化格式，去除冗余信息
- **行数截断阶段**：对于超长表格，保留头部（前10行）和尾部（后5行）数据，中间部分省略
- **最终截断阶段**：如果处理后仍超长，进行最终字符级截断，并保留处理标记

**截断信息标记：**
- 在截断后的内容中添加明确的标记：`[表格格式已优化]`、`[表格数据行已截断处理]`、`[表格内容已截断处理]`
- 告知用户内容已被处理，便于理解搜索结果

**与Text截断的区别：**
- Table截断更注重保持表格结构和关键数据
- Text截断主要在语义边界进行，保持语义完整性

### **9.2 召回再造细化实施方案**

#### **第一阶段：完善基础架构（1-2天）**

**1.1 文档加载机制重构**
```python
def _load_documents(self):
    """重构表格文档加载机制，参考Text Engine的健壮性设计"""
    # 支持两种加载方式
    # 1. 统一文档加载器（优先）
    # 2. 向量数据库直接加载（备选）
    # 添加重试机制和错误处理
    # 支持延迟加载和缓存管理
```

**具体改进点：**
- 添加加载状态检查和诊断日志
- 实现重试机制（最多3次，指数退避）
- 支持加载失败时的降级策略
- 添加文档数量和质量验证
- 实现延迟加载，避免一次性加载所有文档

**1.2 配置管理优化**
```python
def _validate_config(self):
    """增强配置验证，确保Table专用配置的完整性"""
    # 验证Table专用配置参数
    # 支持动态参数调整
    # 添加配置完整性检查
    # 实现配置热重载能力
```

**具体改进点：**
- 验证Table专用参数（`max_table_rows`、`table_similarity_threshold`等）
- 支持配置的动态更新和验证
- 添加配置参数的合理性检查
- 实现配置变更的实时生效

#### **第二阶段：增强Table专用功能（2-3天）**

**2.1 表格结构理解增强**
```python
def _analyze_table_structure(self, doc):
    """分析表格结构，提取深层特征"""
    # 提取表格类型、列名、数据类型
    # 分析表格的完整性和规范性
    # 生成表格质量评分
    # 识别表格的业务领域和用途
```

**具体改进点：**
- 智能识别表格类型（财务表、人事表、统计表、配置表等）
- 提取和标准化列名信息，支持中英文列名
- 分析表格的行数、列数、数据完整性、空值比例
- 生成表格结构质量评分（0-100分）
- 识别表格的业务领域和主要用途

**2.2 表格专用搜索策略重构**
```python
def _table_structure_search(self, query, max_results):
    """表格结构搜索（新增第一层，替代原有的简单搜索）"""
    # 基于表格类型、列名的精确匹配
    # 支持"查找包含某列的数据"等查询
    # 考虑表格结构的相似性
    # 支持表格类型的模糊匹配
```

**具体改进点：**
- **第一层：表格结构搜索** - 基于类型、列名、结构的精确匹配，支持列名模糊匹配
- **第二层：表格内容搜索** - 基于单元格数据、行记录的搜索，支持数值范围查询
- **第三层：表格语义搜索** - 基于业务领域、数据类型的搜索，支持同义词扩展
- **第四层：表格模糊搜索** - 支持部分匹配和相似结构，处理拼写错误
- **第五层：表格扩展搜索** - 基于相关表格和同类型表格，支持"查找类似表格"

#### **第三阶段：智能截断处理（1-2天）**

**3.1 截断感知搜索**
```python
def _truncation_aware_search(self, query, results):
    """截断感知的搜索结果处理"""
    # 识别截断的表格
    # 优先推荐完整表格
    # 提供截断信息和建议
    # 支持"查看完整表格"的扩展查询
```

**具体改进点：**
- 在搜索结果中明确标识截断状态（完整/部分截断/完全截断）
- 基于截断信息调整搜索分数，完整表格优先
- 支持"查看完整表格"的扩展查询功能
- 智能推荐相关的完整表格作为补充

**3.2 截断信息元数据增强**
```python
def _extract_truncation_metadata(self, doc):
    """提取截断相关信息，增强元数据"""
    # 记录原始长度、截断类型
    # 记录保留的行数、列数
    # 生成截断后的内容摘要
    # 标记截断的关键信息位置
```

**具体改进点：**
- 在表格元数据中详细记录截断状态和类型
- 记录截断类型（行数截断、内容截断、格式优化、混合截断）
- 生成截断后的内容摘要和关键信息
- 标记截断的关键信息位置，便于用户理解

#### **第四阶段：中文处理和语义增强（2-3天）**

**4.1 中文分词和语义处理**
```python
def _extract_table_keywords(self, query):
    """提取表格查询关键词，支持中文处理"""
    # 使用jieba进行中文分词
    # 识别表格相关的专业术语
    # 支持同义词和近义词扩展
    # 处理中文数字和单位
```

**具体改进点：**
- 集成jieba中文分词，支持中文查询
- 添加表格领域的专业词典（财务、人事、统计等）
- 支持中文同义词和近义词扩展
- 智能识别中文数字、单位、日期等特殊表达

**4.2 表格语义理解**
```python
def _understand_table_query_intent(self, query):
    """理解表格查询意图，支持复杂查询"""
    # 识别查询类型（结构查询、内容查询、统计查询等）
    # 提取查询的约束条件
    # 生成查询的语义表示
    # 支持多条件组合查询
```

**具体改进点：**
- 识别表格查询的意图类型（查找表格、统计数据、比较分析等）
- 提取查询的约束条件（列名、数据类型、数值范围、时间范围等）
- 生成查询的语义表示，用于智能匹配
- 支持多条件组合查询，如"查找2023年销售额超过100万的财务表"

#### **第五阶段：性能优化和测试（1-2天）**

**5.1 搜索性能优化**
```python
def _optimize_table_search(self):
    """优化表格搜索性能，提升响应速度"""
    # 实现表格结构索引
    # 优化向量搜索策略
    # 支持并行处理
    # 添加搜索结果缓存
```

**具体改进点：**
- 实现表格结构的快速索引（类型索引、列名索引、数值范围索引）
- 优化向量搜索的参数和策略，支持批量查询
- 支持大规模表格的并行处理
- 添加搜索结果缓存机制，提升重复查询性能

**5.2 综合测试和验证**
```python
def test_table_engine_comprehensive():
    """综合测试Table Engine，确保功能完整性"""
    # 测试各种表格类型和查询场景
    # 测试截断处理的正确性
    # 测试中文查询的支持
    # 性能基准测试和优化
```

**具体改进点：**
- 创建全面的测试用例，覆盖各种表格类型
- 测试各种查询场景（精确查询、模糊查询、范围查询、组合查询）
- 验证截断处理的正确性和完整性
- 性能基准测试，确保响应时间达标

### **9.3 实施时间表和优先级**

| 阶段 | 任务 | 预计时间 | 优先级 | 关键依赖 |
|------|------|----------|--------|----------|
| 第一阶段 | 完善基础架构 | 1-2天 | 🔴 高 | 现有配置管理 |
| 第二阶段 | 增强Table专用功能 | 2-3天 | 🔴 高 | 第一阶段完成 |
| 第三阶段 | 智能截断处理 | 1-2天 | 🟡 中 | 第二阶段完成 |
| 第四阶段 | 中文处理和语义增强 | 2-3天 | 🟡 中 | 第二阶段完成 |
| 第五阶段 | 性能优化和测试 | 1-2天 | �� 低 | 前四阶段完成 |

**总计：7-12天**

### **9.4 预期效果和成功指标**

#### **功能提升指标**
- **表格搜索准确率**：从当前水平提升到90%+
- **复杂查询支持**：支持多条件组合查询和中文查询
- **截断处理能力**：智能识别和处理截断表格
- **结构理解能力**：深度理解表格类型、列名、数据类型

#### **性能提升指标**
- **搜索响应时间**：召回阶段<100ms，重排序阶段<2s
- **并发处理能力**：支持10+并发查询
- **内存使用优化**：减少20-30%的内存占用
- **缓存命中率**：提升到80%+

#### **用户体验指标**
- **搜索结果质量**：重排序后的前10个结果相关性>90%
- **查询意图理解**：准确理解90%+的用户查询意图
- **截断信息展示**：清晰展示表格的截断状态和完整性
- **中文交互支持**：完整支持中文查询和结果展示

### **9.5 风险控制和回退方案**

#### **技术风险识别**
- **向量搜索性能风险**：监控FAISS查询性能，必要时优化索引结构
- **大模型API稳定性风险**：实现DashScope API的降级策略和重试机制
- **内存使用风险**：监控表格文档的内存占用，实现内存使用限制
- **配置一致性风险**：确保配置更新不会破坏现有功能，实现配置回滚机制

#### **回退方案设计**
- **功能开关控制**：通过`enable_enhanced_reranking`和`use_new_pipeline`控制功能启用
- **渐进式部署**：先部署召回策略，再部署重排序服务，最后部署Pipeline集成
- **A/B测试支持**：对比新旧系统的性能表现，确保改进效果
- **配置回滚机制**：如果配置更新出现问题，可以快速回滚到之前的稳定版本

### **9.6 后续优化方向**

#### **短期优化（1-2个月）**
- **表格结构增强**：集成更先进的表格识别和特征提取算法
- **多模态融合**：结合文本和表格的混合搜索，支持跨模态查询
- **个性化推荐**：基于用户行为的表格推荐，学习用户偏好

#### **长期优化（3-6个月）**
- **配置管理增强**：支持动态配置更新和热重载，无需重启服务
- **智能查询优化**：基于查询历史的智能查询建议和自动补全
- **表格质量评估**：自动评估表格数据的质量和可靠性，提供质量评分

---

## **下一步行动计划**

基于现状深度分析和细化实施方案，建议按以下顺序进行改造：

1. **立即开始**：完善基础架构，重构文档加载机制和配置管理
2. **第一周**：增强Table专用功能，实现表格结构理解和专用搜索策略
3. **第二周**：实现智能截断处理，增强截断感知能力
4. **第三周**：集成中文处理和语义增强，支持复杂查询
5. **第四周**：性能优化和综合测试，确保所有功能正常工作

**特别注意**：
- 所有改进必须充分利用Table的特殊性，不能简单照搬Text Engine的实现
- 必须考虑大表截断的限制，实现截断感知的搜索策略
- 保持配置管理的一致性，确保`v2_config.json`和`v2_config.py`的完全同步
- 遵循渐进式改造原则，每个阶段都要有明确的测试和验证


## **九、Table Engine 召回再造细化实施方案**

### **9.1 现状深度分析**

#### **当前实现状态评估**
**✅ 已完成的基础功能：**
- 基础的五层召回策略框架已搭建
- 配置管理统一化（`v2_config.py` 和 `v2_config.json`）已完成
- 基本的向量搜索、关键词搜索、混合搜索、模糊搜索、扩展搜索方法已实现
- 结果去重和排序逻辑已实现
- 配置验证和初始化流程已完善

**❌ 存在的核心问题：**
- 文档加载机制过于简化，缺乏错误处理和重试机制
- 搜索策略实现过于简单，缺乏深度和智能性
- 没有充分利用Table的特殊性（结构、类型、列名等）
- 缺乏对截断表格的智能处理
- 没有中文分词和语义处理支持
- 配置参数使用不够灵活，缺乏动态调整能力

#### **与Text Engine的差距分析**
**功能完整性对比：**
- **Text Engine**：完善的五层召回、中文分词、语义处理、错误处理、智能降级
- **Table Engine**：基础的五层框架，但实现深度不足，缺乏Table专用功能

**特殊功能对比：**
- **Text Engine**：支持多种相似度算法、智能降级、详细诊断、延迟加载
- **Table Engine**：缺乏Table专用的结构理解、智能处理、截断感知能力

#### **Table的特殊性分析**
**存储结构特点：**
- Table文档具有独特的元数据：`chunk_type: 'table'`、`table_id`、`table_type`、`table_row_count`、`table_column_count`
- 区别于纯文本的线性结构，表格具有二维结构和层次化信息

**处理流程特点：**
- 涉及专门的HTML表格解析、结构化文本转换（`document_processing/table_processor.py`）
- 智能分块（`document_processing/enhanced_chunker.py`），包括解析失败时的降级处理
- 支持表格类型识别、列名提取、数据类型分析

**搜索需求特点：**
- 需要考虑表格的二维结构、列名、表头、数据类型和表格类型匹配
- 支持"查找包含某列的数据"、"查找某类型的表格"等结构化查询
- 需要处理表格的截断状态和完整性信息

#### **大表截断处理机制分析**
**限制来源：**
- 受DashScope API的 `max_chunk_length` (2048字符) 限制
- 受 `config/settings.py` 中的 `max_table_rows` (100行) 限制

**智能截断策略（`document_processing/enhanced_chunker.py`）：**
- **格式优化阶段**：对于长度适中的表格，优化格式，去除冗余信息
- **行数截断阶段**：对于超长表格，保留头部（前10行）和尾部（后5行）数据，中间部分省略
- **最终截断阶段**：如果处理后仍超长，进行最终字符级截断，并保留处理标记

**截断信息标记：**
- 在截断后的内容中添加明确的标记：`[表格格式已优化]`、`[表格数据行已截断处理]`、`[表格内容已截断处理]`
- 告知用户内容已被处理，便于理解搜索结果

**与Text截断的区别：**
- Table截断更注重保持表格结构和关键数据
- Text截断主要在语义边界进行，保持语义完整性

### **9.2 召回再造细化实施方案**

#### **第一阶段：完善基础架构（1-2天）**

**1.1 文档加载机制重构**
```python
def _load_documents(self):
    """重构表格文档加载机制，参考Text Engine的健壮性设计"""
    # 支持两种加载方式
    # 1. 统一文档加载器（优先）
    # 2. 向量数据库直接加载（备选）
    # 添加重试机制和错误处理
    # 支持延迟加载和缓存管理
```

**具体改进点：**
- 添加加载状态检查和诊断日志
- 实现重试机制（最多3次，指数退避）
- 支持加载失败时的降级策略
- 添加文档数量和质量验证
- 实现延迟加载，避免一次性加载所有文档

**1.2 配置管理优化**
```python
def _validate_config(self):
    """增强配置验证，确保Table专用配置的完整性"""
    # 验证Table专用配置参数
    # 支持动态参数调整
    # 添加配置完整性检查
    # 实现配置热重载能力
```

**具体改进点：**
- 验证Table专用参数（`max_table_rows`、`table_similarity_threshold`等）
- 支持配置的动态更新和验证
- 添加配置参数的合理性检查
- 实现配置变更的实时生效

#### **第二阶段：增强Table专用功能（2-3天）**

**2.1 表格结构理解增强**
```python
def _analyze_table_structure(self, doc):
    """分析表格结构，提取深层特征"""
    # 提取表格类型、列名、数据类型
    # 分析表格的完整性和规范性
    # 生成表格质量评分
    # 识别表格的业务领域和用途
```

**具体改进点：**
- 智能识别表格类型（财务表、人事表、统计表、配置表等）
- 提取和标准化列名信息，支持中英文列名
- 分析表格的行数、列数、数据完整性、空值比例
- 生成表格结构质量评分（0-100分）
- 识别表格的业务领域和主要用途

**2.2 表格专用搜索策略重构**
```python
def _table_structure_search(self, query, max_results):
    """表格结构搜索（新增第一层，替代原有的简单搜索）"""
    # 基于表格类型、列名的精确匹配
    # 支持"查找包含某列的数据"等查询
    # 考虑表格结构的相似性
    # 支持表格类型的模糊匹配
```

**具体改进点：**
- **第一层：表格结构搜索** - 基于类型、列名、结构的精确匹配，支持列名模糊匹配
- **第二层：表格内容搜索** - 基于单元格数据、行记录的搜索，支持数值范围查询
- **第三层：表格语义搜索** - 基于业务领域、数据类型的搜索，支持同义词扩展
- **第四层：表格模糊搜索** - 支持部分匹配和相似结构，处理拼写错误
- **第五层：表格扩展搜索** - 基于相关表格和同类型表格，支持"查找类似表格"

#### **第三阶段：智能截断处理（1-2天）**

**3.1 截断感知搜索**
```python
def _truncation_aware_search(self, query, results):
    """截断感知的搜索结果处理"""
    # 识别截断的表格
    # 优先推荐完整表格
    # 提供截断信息和建议
    # 支持"查看完整表格"的扩展查询
```

**具体改进点：**
- 在搜索结果中明确标识截断状态（完整/部分截断/完全截断）
- 基于截断信息调整搜索分数，完整表格优先
- 支持"查看完整表格"的扩展查询功能
- 智能推荐相关的完整表格作为补充

**3.2 截断信息元数据增强**
```python
def _extract_truncation_metadata(self, doc):
    """提取截断相关信息，增强元数据"""
    # 记录原始长度、截断类型
    # 记录保留的行数、列数
    # 生成截断后的内容摘要
    # 标记截断的关键信息位置
```

**具体改进点：**
- 在表格元数据中详细记录截断状态和类型
- 记录截断类型（行数截断、内容截断、格式优化、混合截断）
- 生成截断后的内容摘要和关键信息
- 标记截断的关键信息位置，便于用户理解

#### **第四阶段：中文处理和语义增强（2-3天）**

**4.1 中文分词和语义处理**
```python
def _extract_table_keywords(self, query):
    """提取表格查询关键词，支持中文处理"""
    # 使用jieba进行中文分词
    # 识别表格相关的专业术语
    # 支持同义词和近义词扩展
    # 处理中文数字和单位
```

**具体改进点：**
- 集成jieba中文分词，支持中文查询
- 添加表格领域的专业词典（财务、人事、统计等）
- 支持中文同义词和近义词扩展
- 智能识别中文数字、单位、日期等特殊表达

**4.2 表格语义理解**
```python
def _understand_table_query_intent(self, query):
    """理解表格查询意图，支持复杂查询"""
    # 识别查询类型（结构查询、内容查询、统计查询等）
    # 提取查询的约束条件
    # 生成查询的语义表示
    # 支持多条件组合查询
```

**具体改进点：**
- 识别表格查询的意图类型（查找表格、统计数据、比较分析等）
- 提取查询的约束条件（列名、数据类型、数值范围、时间范围等）
- 生成查询的语义表示，用于智能匹配
- 支持多条件组合查询，如"查找2023年销售额超过100万的财务表"

#### **第五阶段：性能优化和测试（1-2天）**

**5.1 搜索性能优化**
```python
def _optimize_table_search(self):
    """优化表格搜索性能，提升响应速度"""
    # 实现表格结构索引
    # 优化向量搜索策略
    # 支持并行处理
    # 添加搜索结果缓存
```

**具体改进点：**
- 实现表格结构的快速索引（类型索引、列名索引、数值范围索引）
- 优化向量搜索的参数和策略，支持批量查询
- 支持大规模表格的并行处理
- 添加搜索结果缓存机制，提升重复查询性能

**5.2 综合测试和验证**
```python
def test_table_engine_comprehensive():
    """综合测试Table Engine，确保功能完整性"""
    # 测试各种表格类型和查询场景
    # 测试截断处理的正确性
    # 测试中文查询的支持
    # 性能基准测试和优化
```

**具体改进点：**
- 创建全面的测试用例，覆盖各种表格类型
- 测试各种查询场景（精确查询、模糊查询、范围查询、组合查询）
- 验证截断处理的正确性和完整性
- 性能基准测试，确保响应时间达标

### **9.3 实施时间表和优先级**

| 阶段 | 任务 | 预计时间 | 优先级 | 关键依赖 |
|------|------|----------|--------|----------|
| 第一阶段 | 完善基础架构 | 1-2天 | 🔴 高 | 现有配置管理 |
| 第二阶段 | 增强Table专用功能 | 2-3天 | 🔴 高 | 第一阶段完成 |
| 第三阶段 | 智能截断处理 | 1-2天 | 🟡 中 | 第二阶段完成 |
| 第四阶段 | 中文处理和语义增强 | 2-3天 | 🟡 中 | 第二阶段完成 |
| 第五阶段 | 性能优化和测试 | 1-2天 | �� 低 | 前四阶段完成 |

**总计：7-12天**

### **9.4 预期效果和成功指标**

#### **功能提升指标**
- **表格搜索准确率**：从当前水平提升到90%+
- **复杂查询支持**：支持多条件组合查询和中文查询
- **截断处理能力**：智能识别和处理截断表格
- **结构理解能力**：深度理解表格类型、列名、数据类型

#### **性能提升指标**
- **搜索响应时间**：召回阶段<100ms，重排序阶段<2s
- **并发处理能力**：支持10+并发查询
- **内存使用优化**：减少20-30%的内存占用
- **缓存命中率**：提升到80%+

#### **用户体验指标**
- **搜索结果质量**：重排序后的前10个结果相关性>90%
- **查询意图理解**：准确理解90%+的用户查询意图
- **截断信息展示**：清晰展示表格的截断状态和完整性
- **中文交互支持**：完整支持中文查询和结果展示

### **9.5 风险控制和回退方案**

#### **技术风险识别**
- **向量搜索性能风险**：监控FAISS查询性能，必要时优化索引结构
- **大模型API稳定性风险**：实现DashScope API的降级策略和重试机制
- **内存使用风险**：监控表格文档的内存占用，实现内存使用限制
- **配置一致性风险**：确保配置更新不会破坏现有功能，实现配置回滚机制

#### **回退方案设计**
- **功能开关控制**：通过`enable_enhanced_reranking`和`use_new_pipeline`控制功能启用
- **渐进式部署**：先部署召回策略，再部署重排序服务，最后部署Pipeline集成
- **A/B测试支持**：对比新旧系统的性能表现，确保改进效果
- **配置回滚机制**：如果配置更新出现问题，可以快速回滚到之前的稳定版本

### **9.6 后续优化方向**

#### **短期优化（1-2个月）**
- **表格结构增强**：集成更先进的表格识别和特征提取算法
- **多模态融合**：结合文本和表格的混合搜索，支持跨模态查询
- **个性化推荐**：基于用户行为的表格推荐，学习用户偏好

#### **长期优化（3-6个月）**
- **配置管理增强**：支持动态配置更新和热重载，无需重启服务
- **智能查询优化**：基于查询历史的智能查询建议和自动补全
- **表格质量评估**：自动评估表格数据的质量和可靠性，提供质量评分

---

## **下一步行动计划**

基于现状深度分析和细化实施方案，建议按以下顺序进行改造：

1. **立即开始**：完善基础架构，重构文档加载机制和配置管理
2. **第一周**：增强Table专用功能，实现表格结构理解和专用搜索策略
3. **第二周**：实现智能截断处理，增强截断感知能力
4. **第三周**：集成中文处理和语义增强，支持复杂查询
5. **第四周**：性能优化和综合测试，确保所有功能正常工作

**特别注意**：
- 所有改进必须充分利用Table的特殊性，不能简单照搬Text Engine的实现
- 必须考虑大表截断的限制，实现截断感知的搜索策略
- 保持配置管理的一致性，确保`v2_config.json`和`v2_config.py`的完全同步
- 遵循渐进式改造原则，每个阶段都要有明确的测试和验证